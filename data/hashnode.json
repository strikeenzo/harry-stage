{"posts":[{"_id":"62247d65cefcf05d1a6d49e3","slug":"powerful-code-blocks-with-code-hike-and-mdx","title":"Powerful Code Blocks with Code Hike and MDX","brief":"MDX is a format that combines markup in markdown along with JSX code to embed components into markdown documents. It is used in documentation, blog posts, and much more as one can add interactive examples with JSX. You can learn more about it here.\nT...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1646557910712/Kd9HITQXq.png","dateAdded":"2022-03-06T09:22:45.266Z","contentMarkdown":"[MDX](https://mdxjs.com/) is a format that combines markup in markdown along with JSX code to embed components into markdown documents. It is used in documentation, blog posts, and much more as one can add interactive examples with JSX. You can learn more about it [here](https://mdxjs.com/docs/what-is-mdx/).\n\nToday, we are going to look at a library called [Code Hike](https://codehike.org/) that provides exceptional features on markdown code blocks. These includes [focussing code](https://codehike.org/demo/code), [adding filenames and displaying them as tabs](https://codehike.org/demo/filenames), [annotations](https://codehike.org/demo/meta-annotations), [linking text to code](https://codehike.org/demo/sections), and much more! It also has in-built support for syntax highlighting ü§©\n\nLet us look at adding Code Hike to a Next.js application. Do note that although MDX is supported by a number of frameworks like Vue, Svelte, etc, Code Hike only works with React.\n\n[Live Demo](https://code-hike-example.vercel.app/) / [GitHub Repository](https://github.com/AnishDe12020/code-hike-example)\n\n## Setting up Code Hike in a Next.js application \nFirst of all, let us create a new Next.js application - \n```\nnpx create-next-app code-hike-example\n# OR\nyarn create next-app code-hike-example\n```\n\nNow, open up the project in your favorite text editor.\n\n### Setting up MDX\n\nNext, we need to add MDX to our Next.js application. For this, we are going to be following the [official guide on adding MDX to a Next.js application](https://nextjs.org/docs/advanced-features/using-mdx).\n\nDo note that Code Hike also works with [Next MDX Remote](https://github.com/hashicorp/next-mdx-remote) and [MDX Bundler](https://github.com/kentcdodds/mdx-bundler) however, we are going to look at a simple example with the [official MDX plugin for Next.js](https://www.npmjs.com/package/@next/mdx).\n\nFirst of all, let us install the required packages - \n```\nnpm install @next/mdx @mdx-js/loader\n# OR\nyarn add @next/mdx @mdx-js/loader \n```\n\nNow, open up `next.config.js` and replace it with the following code - \n```js\nconst withMDX = require(\"@next/mdx\")({\n  extension: /\\.mdx?$/,\n  options: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n});\n\nmodule.exports = withMDX({\n  pageExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"md\", \"mdx\"],\n})\n```\n\nWe are simply telling our bundler to treat `.md` and `.mdx` files as pages as well when they are in the `pages` directory. This also takes care of compiling our MDX.\n\nNow, let us setup Code Hike\n\n### Setting up Code Hike\nFirst of all, let us install the [Code Hike Package](https://www.npmjs.com/package/@code-hike/mdx)\n\n```\nnpm install @code-hike/mdx@next\n# OR\nyarn add @code-hike/mdx@next\n```\n\nNow, we must add Code Hike as a [Remark](https://remark.js.org/) plugin. Remark is a simple markdown processor that has a huge ecosystem of plugins.\n\n```js \nconst { remarkCodeHike } = require(\"@code-hike/mdx\");\n\nconst withMDX = require(\"@next/mdx\")({\n  extension: /\\.mdx?$/,\n  options: {\n    remarkPlugins: [[remarkCodeHike]],\n    rehypePlugins: [],\n  },\n});\n\nmodule.exports = withMDX({\n  pageExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"md\", \"mdx\"],\n});\n```\n\nCode Hike uses [Shiki](https://github.com/shikijs/shiki) under the hood to provide syntax highlighting. We can find a list of all the supported themes [here](https://github.com/shikijs/shiki/blob/main/docs/themes.md#all-themes). Let us go with Monokai for this tutorial.\n```js\nconst { remarkCodeHike } = require(\"@code-hike/mdx\");\nconst theme = require(\"shiki/themes/monokai.json\");\n\nconst withMDX = require(\"@next/mdx\")({\n  extension: /\\.mdx?$/,\n  options: {\n    remarkPlugins: [[remarkCodeHike, { theme }]],\n    rehypePlugins: [],\n  },\n});\n\nmodule.exports = withMDX({\n  pageExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"md\", \"mdx\"],\n});\n```\n\nThere is one last thing to do. We need to add the Code Hike CSS to our application. Open up `_app.js` and add this one line of code to the top\n```js\nimport \"@code-hike/mdx/dist/index.css\"\n```\n\n## Testing out Code Hike\nLet us make a new file called `code-hike.mdx` under the `pages` directory. Add the following mdx markup in there - \n````md\n# Just testing out [Code Hike](https://codehike.org/)\n\nSome normal `markdown`\n\n## Annotation Example\n```js index.js box=1[25:39]\nconsole.log(\"Some code. I am annotated!\")\n```\n\n## Focus Example\n```js next.config.js focus=1:2,7\nconst { remarkCodeHike } = require(\"@code-hike/mdx\");\nconst theme = require(\"shiki/themes/monokai.json\");\n\nconst withMDX = require(\"@next/mdx\")({\n  extension: /\\.mdx?$/,\n  options: {\n    remarkPlugins: [[remarkCodeHike, { theme }]],\n    rehypePlugins: [],\n  },\n});\n\nmodule.exports = withMDX({\n  pageExtensions: [\"ts\", \"tsx\", \"js\", \"jsx\", \"md\", \"mdx\"],\n});\n```\n\n<CH.Section>\n\n## Code Links Example\n\nWe are looking at the [console.log](focus://console.js#2) function today\n\n<CH.Code>\n```js console.js\nconsole.table([\"Hello\", \"World\"])\nconsole.log(\"Hello World\")\n```\n</CH.Code>\n\n</CH.Section>\n````\n\nHere, we are writing some basic markdown at first and then adding 3 code blocks. In all 3 of them, I have provided a filename just after specifying the language (`js` in these 3 cases).\n\nIn the first code block, we pass in the `box` attribute after the filename. We set it to `1[25:39]` where `1` indicated the line number and `25:39` indicates the range of characters to annotate on that line.\n\nSimilarly, in the second code block, we pass in the `focus` attribute and set it to `1:2,7`. Here `1:2` indicates a range of lines to be put on focus. We also add line 7 by adding it as a comma-separated value.\n\nFor the third code block, we have to wrap the content and code block in the `CH.Section` tag. We must also wrap the code block in the `CH.Code` tag. This is so that Code Hike knows which file we are going to be referring to through the code links when we specify the filename.\n\nWe have `console.log` as a code link here that points to `focus://console.js#2`. This indicates that whenever we hover over that code link, it will focus the second line in the  `console.js` code block.\n\nAt last, this is what it should look like when we navigate to [`/code-hike`](http://localhost:3000/code-hike)\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646557043098/Zgwdl-v55.png)\n\nYes, those box shadows are cool üëÄ\n\n## Conclusion\nThat was a brief overview of Code Hike. Code Hike supports many more things like [Scrollycoding](https://codehike.org/demo/scrollycoding) and previews as well. Code Hike is still in a beta stage and many features are still experimental.\n\nHope everything went well so far and now you can use Code Hike in your blog or documentation to achieve extremely powerful code blocks!\n\nSee you in the next one üòÅü§û\n\n## üîó Important Links\n- [Code Hike](https://codehike.org/)\n- [Code Hike GitHub Repository](https://github.com/code-hike/codehike)\n- [GitHub Repository for this tutorial](https://github.com/AnishDe12020/code-hike-example)\n- [Deployed Preview for this tutorial](https://code-hike-example.vercel.app/)","readingTime":{"text":"5 min read","minutes":4.735,"time":284100,"words":947},"wordCount":947},{"_id":"621f5cc1aa0b9716581fa8b1","slug":"making-an-accessible-breadcrumb-navigation-using-tailwindcss-and-nextjs","title":"Making an accessible Breadcrumb Navigation using TailwindCSS and NextJS","brief":"Breadcrumb Navigations are starting to appear in many applications nowadays, mostly in dashboards. Today we are going to look at building a Breadcrumb navigation that is accessible and styled with TailwindCSS. We are going to be using NextJS (specifi...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1646221079849/m2I61XWGT.png","dateAdded":"2022-03-02T12:02:09.997Z","contentMarkdown":"Breadcrumb Navigations are starting to appear in many applications nowadays, mostly in dashboards. Today we are going to look at building a Breadcrumb navigation that is accessible and styled with TailwindCSS. We are going to be using NextJS (specifically the [NextJS Router](https://nextjs.org/docs/api-reference/next/router)) for this tutorial. However, you can follow the same steps for other frameworks, it may also not be a React framework. Just make sure to look up and implement the proper router logic and create the components properly, styling will remain the same.\n\n## üçû Ok, what is a Breadcrumb Navigation?\nYou must have come across navigation bars, something like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646199179447/9_Fiu4HCV.png)\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646199205374/YsJUaSi8p.png)\n\nThe first example is from the [Vercel](https://vercel.com/) dashboard and the second one is from the [Netlify](https://www.netlify.com/) dashboard.\n\nWe can see that it gives us a brief idea of what page we are on and also lets us navigate back easily (yes, those breadcrumb items are usually links).\n\nAt times, these Breadcrumb Links also have an associated dropdown, something like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646199893472/GKcGgeWLz.png)\n\nWe will not be building this today as it is a more advanced use case, however, in larger projects, it will be a useful thing to have as it makes navigation easier.\n\n## Initializing a NextJS application with TailwindCSS\nFirst of all, let us create a new NextJS application\n```\nnpx create-next-app breadcrumb-example\n# OR\nyarn create next-app breadcrumb-example\n```\n\nNow, let us remove some of the boilerplate code and existing CSS (except the `global.css` file) as we are going to be adding TailwindCSS.\n\nA cleaned up `pages/index.js` will look like this - \n```jsx\nimport Head from \"next/head\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Head>\n        <title>NextJS Breadcrumb Example</title>\n        <meta\n          name=\"description\"\n          content=\"A simple example application for a NextJS Breadcrumb tutorial\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <h1>Breadcrumb Navigation Example with NextJS</h1>\n      </main>\n    </div>\n  );\n}\n```\n\nAlso, delete `Home.module.css` under the `styles` directory.\n\n### Adding TailwindCSS\nWe are going to be simply following the office guide on [adding TailwindCSS to a NextJS application](https://tailwindcss.com/docs/guides/nextjs).\n\nFirst of all, let us install TailwindCSS, PostCSS, and AutoPrefixer - \n```\nnpm install -D tailwindcss postcss autoprefixer\n# OR\nyarn add -D tailwindcss postcss autoprefixer\n```\nAlso, run the following command to generate the `tailwind.config.js` and `postcss.config.js` files - \n```\nnpx tailwindcss init -p\n```\n\nNow, replace the `tailwind.config.js` file with the following - \n```js\nmodule.exports = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nNow, add the following code to the `globals.css` file under the `styles` directory - \n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nFor this example, I am going to go for a dark mode version, just so that the screenshots I take are easy on the eyes. For this, I will add this to my `globals.css` file - \n```css\n@layer base {\n  body {\n    @apply bg-black text-white;\n  }\n}\n```\n\nI am also going to add some styles to the `h1` tag we added earlier in the `index.js` file - \n```html\n<h1 className=\"mx-8 md:mx-16 lg:mx-32 mt-32 text-2xl md:text-3xl lg:text-4xl\">\n    Breadcrumb Navigation Example with NextJS\n</h1>\n```\n\nThis is what the website looks like now - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646201361555/zql7yFvkI.png)\n\n## Building the Breadcrumb Navigation\nTime for the fun part, let us build the breadcrumb navigation!\n\nLet us make a new directory called `components`. This is where we will be putting in our `Breadcrumb` and `BreadcrumbItem` components.\n\nNow, let us make the Breadcrumb. Create a file called `Breadcrumb.jsx` and add the following code - \n\n```jsx\nimport { Children } from \"react\";\nimport { Fragment } from \"react/cjs/react.production.min\";\n\nconst Breadcrumb = ({ children }) => {\n  const childrenArray = Children.toArray(children);\n\n  console.log(childrenArray);\n\n  const childrenWtihSeperator = childrenArray.map((child, index) => {\n    if (index !== childrenArray.length - 1) {\n      return (\n        <Fragment key={index}>\n          {child}\n          <span>/</span>\n        </Fragment>\n      );\n    }\n    return child\n  });\n\n  return (\n    <nav className=\"mx-8 md:mx-16 lg:mx-32 mt-8\">\n      <ol className=\"flex items-center space-x-4\">{childrenWtihSeperator}</ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n```\n\nLet us go over this code step by step. First of all, we make a new component called `Breadcrumb`. We are accepting one prop, that is the children. These children will include the Breadcrumb Items, that is the links to the pages.\n\nWe then convert the children into an array using the [`Children.toArray()` function](https://reactjs.org/docs/react-api.html#reactchildrentoarray). \n\nIf we log the `childrenArray` variable to the console, we should see something like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646206142465/6mnoTJzFT.png)\n\nHere, we can see that it contains all the metadata about the component such as the props, component type, etc.\n\nNext, we take this array and map over it. We check if it is the last element of the array by comparing the `index` of the element with the length of the array. If it is not the last element, we return it as a [React Fragment](https://reactjs.org/docs/react-api.html#reactfragment) with the child element itself, as well as a separator (`/` in this case as it is the most common one but you can change it as well). If it is the last element of the array, we just return the element, without the separator.\n\nNext, the Breadcrumb component returns a `nav` element with an order list (`ol`). The ordered list is a flexbox and the `space-x-4` class adds a margin of `1 rem` between all children elements (the breadcrumb items in this case).\n\nLastly, we export the component to be used later.\n\nNow, let us create another file called `BreadcrumbItem.jsx` and add the following code to it - \n```jsx\nimport Link from \"next/link\";\n\nconst BreadcrumbItem = ({ children, href, ...props }) => {\n  return (\n    <li {...props}>\n      <Link href={href} passHref>\n        <a>{children}</a>\n      </Link>\n    </li>\n  );\n};\n\nexport default BreadcrumbItem;\n```\n\nHere, we are creating a new component called `BreadcrumbItem` which takes in a `children` and a `href` prop. We also take in additional props which will be passed into the `li` prop. Do note that each `BreadcrumbItem` is a list item and hence it fits in the ordered list we created earlier in the `Breadcrumb` component.\n\nTime to add the Breadcrumb to our application. For the time being, let us add the following code to our `index.js` file under `pages` - \n\n```html\n<Breadcrumb>\n    <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n    <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n</Breadcrumb>\n```\n\nAlso, don't forget the imports\n```jsx\nimport Breadcrumb from \"../components/Breadcrumb\";\nimport BreadcrumbItem from \"../components/BreadcrumbItem\";\n```\n\nThis is what the home page should look like now - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646210552946/KIeeKQd8g.png)\n\nRight now, we are rendering the breadcrumb on the home page and hardcoding the page names. However, this is not what we should be doing, let us look at a better approach where the routes are inferred using the router component.\n\n## Dynamically creating the breadcrumb items\nTill now, we were manually passing in the breadcrumb items into the `Breadcrumb` component. However, this approach is not suitable for larger applications. \n\nI have made some changes to the `_app.js` file to dynamically create the breadcrumb items - \n```js\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport \"../styles/globals.css\";\nimport Breadcrumb from \"../components/Breadcrumb\";\nimport BreadcrumbItem from \"../components/BreadcrumbItem\";\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter();\n  const [breadcrumbs, setBreadcrumbs] = useState();\n\n  useEffect(() => {\n    const pathWithoutQuery = router.asPath.split(\"?\")[0];\n    let pathArray = pathWithoutQuery.split(\"/\");\n    pathArray.shift();\n\n    pathArray = pathArray.filter((path) => path !== \"\");\n\n    const breadcrumbs = pathArray.map((path, index) => {\n      const href = \"/\" + pathArray.slice(0, index + 1).join(\"/\");\n      return {\n        href,\n        label: path.charAt(0).toUpperCase() + path.slice(1),\n      };\n    });\n\n    setBreadcrumbs(breadcrumbs);\n  }, [router.asPath]);\n\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem href=\"/\">Home</BreadcrumbItem>\n        {breadcrumbs &&\n          breadcrumbs.map((breadcrumb) => (\n            <BreadcrumbItem key={breadcrumb.href} href={breadcrumb.href}>\n              {breadcrumb.label}\n            </BreadcrumbItem>\n          ))}\n      </Breadcrumb>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\nLet us go through this code. First of all, we are importing the NextJS router, [the `useEffect` hook](https://reactjs.org/docs/hooks-effect.html), [the `useState` hook](https://reactjs.org/docs/hooks-state.html), the `Breadcrumb` component and the `BreadcrumbItem` component. Also, you can remove the Breadcrumb component from the `index.js` file.\n\nThen, inside the `MyApp` component, we are initializing the router and creating a state to store out breadcrumbs. Next, we have an `useEffect` hook which fires when the page loads and whenever `router.asPath` changes.\n\nIn the `useEffect` hook, firstly, we remove the query parameters from our path (which we get from `router.asPath`). Next, we split it into an array called `pathArray` and call the [`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) function on it to remove the first element (which is the home route). \n\nNext, we also filter it out so that we don't get any other blank path (this is because the NextJS router returns a blank element at the last index if we are on the home route).\n\nAfter that, we [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over it and generate a new array called `breadcrumbs`. The `breadcrumbs` array is an array of objects that contain the `href` and `label` for the breadcrumb items.\n\nLastly, we save it to the `breadcrumbs` state so that we can use it outside the `useEffect` hook.\n\nNext, in the JSX, we add the `Breadcrumb` component and add a `BreadcrumbItem` for the home route to it.\n\nThen, we make sure that the `breadcrumbs` array is not null and map over it, adding the other `BreadcrumbItem` components.\n\nNow, to test it out, create a directory called `dashboard` under `pages` and add 2 files - `index.js` and `[id].js`.\n\nAdd the following code to `index.js` - \n```jsx\nimport Head from \"next/head\";\n\nconst Dashboard = () => {\n  return (\n    <div>\n      <Head>\n        <title>Dashboard | NextJS Breadcrumb Example</title>\n        <meta\n          name=\"description\"\n          content=\"A simple example application for a NextJS Breadcrumb tutorial\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <h1 className=\"mx-8 md:mx-16 lg:mx-32 mt-32 text-2xl md:text-3xl lg:text-4xl\">\n          Breadcrumb Navigation Example with NextJS - Dashboard Page\n        </h1>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;\n```\n\nNow, add the following code to `[id].js` - \n```jsx\nimport Head from \"next/head\";\n\nconst Project = () => {\n  return (\n    <div>\n      <Head>\n        <title>Dynamic Route | NextJS Breadcrumb Example</title>\n        <meta\n          name=\"description\"\n          content=\"A simple example application for a NextJS Breadcrumb tutorial\"\n        />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main>\n        <h1 className=\"mx-8 md:mx-16 lg:mx-32 mt-32 text-2xl md:text-3xl lg:text-4xl\">\n          Breadcrumb Navigation Example with NextJS - Dynamic Route Page\n        </h1>\n      </main>\n    </div>\n  );\n};\n\nexport default Project;\n```\n\nNow, let us head over to `/dashboard`\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646217652362/uow8lzmLv.png)\n\nWe can see that the breadcrumb works properly and the links work too!\n\nNow let us head over to `/dashboard/test` and we can see that the breadcrumb displays the dynamic route - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646217749339/A4xbuXLHg.png)\n\n## Making it accessible\nFirst of all, let us add an `aria-label` of value `breadcrumb` to our `Breadcrumb` component - \n```jsx\nimport { Children } from \"react\";\nimport { Fragment } from \"react\";\n\nconst Breadcrumb = ({ children }) => {\n  const childrenArray = Children.toArray(children);\n\n  const childrenWtihSeperator = childrenArray.map((child, index) => {\n    if (index !== childrenArray.length - 1) {\n      return (\n        <Fragment key={index}>\n          {child}\n          <span>/</span>\n        </Fragment>\n      );\n    }\n    return child;\n  });\n\n  return (\n    <nav className=\"mx-8 md:mx-16 lg:mx-32 mt-8\" aria-label=\"breadcrumb\">\n      <ol className=\"flex items-center space-x-4\">{childrenWtihSeperator}</ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n```\n\nNow, let us make a small change to our `_app.js` to pass in a prop to the `BreadcrumbItem` called `isCurrent` with a boolean value. The value is true for the last breadcrumb item, that is, the current page.\n\n```jsx\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport \"../styles/globals.css\";\nimport Breadcrumb from \"../components/Breadcrumb\";\nimport BreadcrumbItem from \"../components/BreadcrumbItem\";\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter();\n  const [breadcrumbs, setBreadcrumbs] = useState();\n\n  useEffect(() => {\n    const pathWithoutQuery = router.asPath.split(\"?\")[0];\n    let pathArray = pathWithoutQuery.split(\"/\");\n    pathArray.shift();\n\n    pathArray = pathArray.filter((path) => path !== \"\");\n\n    const breadcrumbs = pathArray.map((path, index) => {\n      const href = \"/\" + pathArray.slice(0, index + 1).join(\"/\");\n      return {\n        href,\n        label: path.charAt(0).toUpperCase() + path.slice(1),\n        isCurrent: index === pathArray.length - 1,\n      };\n    });\n\n    setBreadcrumbs(breadcrumbs);\n  }, [router.asPath]);\n\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem isCurrent={router.pathname === \"/\"} href=\"/\">\n          Home\n        </BreadcrumbItem>\n        {breadcrumbs &&\n          breadcrumbs.map((breadcrumb) => (\n            <BreadcrumbItem\n              key={breadcrumb.href}\n              href={breadcrumb.href}\n              isCurrent={breadcrumb.isCurrent}\n            >\n              {breadcrumb.label}\n            </BreadcrumbItem>\n          ))}\n      </Breadcrumb>\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\nFor the initial home route, we are simply matching `router.pathname` with `/`.\n\nNow in the `BreadcrumbItem.jsx` file, change the code to the following - \n```jsx\nimport Link from \"next/link\";\n\nconst BreadcrumbItem = ({ children, href, isCurrent, ...props }) => {\n  return (\n    <li {...props}>\n      <Link href={href} passHref>\n        <a\n          className={isCurrent && \"text-blue-500\"}\n          aria-current={isCurrent ? \"page\" : \"false\"}\n        >\n          {children}\n        </a>\n      </Link>\n    </li>\n  );\n};\n\nexport default BreadcrumbItem;\n```\n\nHere, we are setting `aria-current` to `page` if it is the current route.\n\n## Conclusion\nI hope you have a working Breadcrumb navigation now. Feel free to experiment with it and have a nice day üòÅü§û\n\n## üîó Important Links\n- [Deployed Preview](https://nextjs-breadcrumb-example.vercel.app/)\n- [GitHub Repository with the code](https://github.com/AnishDe12020/nextjs-breadcrumb-example)\n\n","readingTime":{"text":"11 min read","minutes":10.28,"time":616800,"words":2056},"wordCount":2057},{"_id":"621dc955068ca006a8f92518","slug":"notiger-get-realtime-notifications-on-events-from-your-application","title":"Notiger - Get realtime notifications on events from your application","brief":"This month started with Hashnode announcing another hackathon, this time in partnership with Netlify, an amazing platform to host websites and serverless functions. This got me thinking and this time an idea came to my mind quite early on in the mont...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1646117836387/JMgYE869K.png","dateAdded":"2022-03-01T07:20:53.547Z","contentMarkdown":"This month started with [Hashnode announcing another hackathon](https://townhall.hashnode.com/netlify-hackathon), this time in partnership with [Netlify](https://www.netlify.com/), an amazing platform to host websites and serverless functions. This got me thinking and this time an idea came to my mind quite early on in the month. However, there were school exams so I did most of the work in the last 8 days üòï\n\n## ü§î What is Notiger?\nNotiger is a tool for developers that allows one to fire events from their applications. These events are stored in a database and can be accessed at any time. Also, if one enables notifications, they will get a notification whenever a new event is fired.\n\n[Live Demo](https://www.notiger.xyz/) / [GitHub Repository](https://github.com/AnishDe12020/notiger)\n\n## üí°A little bit about how the idea\nMy [portfolio site](https://anishde.dev/) has got a huge role to play in this idea. I have a contact form through which one can send me messages. Now, storing the messages in a database makes sense but it would be better to have an easier way to view these messages and also get notified when they are sent.\n\nI also figured that many people would like such a solution as not everyone has the time to implement the logic for saving form responses and events to a database. It has many other use cases, I will get to them in a later part in this blog post.\n\n##  üìö The tech stack\nNotiger has got to do everything from authentication to data storage to sending out push notifications. Here is the tech stack it uses - \n\n- [NextJS](https://nextjs.org/) as the frontend framework\n- [TailwindCSS](https://tailwindcss.com/) as a CSS utility class library to style the frontend\n- [Radix UI](https://www.radix-ui.com/) for unstyled components like Modals (dialogs) and accordions\n- [Headless UI](https://headlessui.dev/) for animations\n- [NextAuth](https://next-auth.js.org/), a simple library to implement authentication\n- [Firebase Cloud Messaging](https://firebase.google.com/products/cloud-messaging) for sending out notifications\n- [MongoDB](https://www.mongodb.com/) to store user data and events\n\nand of course...\n- [Netlify](https://www.netlify.com/) for deploying the frontend. It also supports serverless functions and hence I was able to use NextJS API routes as my backend\n\n\n## ‚öôÔ∏è How does Notiger work?\nAfter creating a notiger account, you create a project. Each project can have streams that will receive the events. When an event is received, it is stored in a database, [MongoDB](https://mongodb.com/) in this case and a notification is pushed to all devices with notifications enabled that the user has.\n\nAn example event - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646108561333/FnImQKDG6.png)\n\nAs you can see, this event is actually from Netlify. Netlify has this amazing feature that allows us to set up webhook notifications for specific events within Netlify. You can learn more about it [here](https://docs.netlify.com/site-deploys/notifications/#outgoing-webhooks). There are many other applications (like GitHub) that allow us to set up webhook notifications for some events. Notiger can receive these webhooks, store the payload (which usually contains important data regarding the event) in a database, and send out a notification whenever the webhook is fired.\n\n### How did I implement authentication with NextAuth?\n[NextAuth](https://next-auth.js.org/) is a JS SDK that allows us to add authentication to our NextJS applications easily. Firstly, we need to set up an API route that will handle all the authentication. Thankfully, NextAuth makes it really easy by providing us with some boilerplate code, and also, we need to only add about 1 file for this. Here is my code - \n`pages/api/auth/[...nextauth].ts` - \n```ts\nimport NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport { MongoDBAdapter } from \"@next-auth/mongodb-adapter\";\nimport clientPromise from \"../../../lib/mongodb-nextauth\";\n\nexport default NextAuth({\n  adapter: MongoDBAdapter(clientPromise),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  callbacks: {\n    async session({ session, token, user }) {\n      session.token = token;\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n  },\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/auth\",\n    signOut: \"/auth\",\n  },\n});\n```\n\nNow, here, I have added social authentication with Google (in just 4 lines of code!) and customized the `session` and the `jwt` callbacks. Also, I am storing user data in a database, MongoDB in this case. The JWT callback creates a JWT with the user data object, which is used in other parts of the application. The session callback is customized to include the JWT token when the current session is retrieved. I have also implemented a custom page for authentication, `/auth`.\n\n#### Securing pages with middleware\nNow, I don't want my users to be greeted with errors by visiting something like the dashboard page when they are not logged in. Thankfully, NextAuth lets us secure pages with just 1 line of code using [NextJS Middleware](https://nextjs.org/docs/middleware). For example, this is how the dashboard page is secured - \n```ts\nexport { default } from \"next-auth/middleware\";\n```\nYes, that is it!!!\n\nIf one is not logged in they, are redirected to the `/auth` page and once they have logged in, they are redirected to the dashboard page (or any other page from where they were redirected to `/auth`).\n\nNow, I could have used server-side rendering on my pages to secure them as well, but it requires more code and is also slower and more resource-intensive. Netlify is also one of those hosting providers which support middleware with zero additional configuration which makes using middleware make more sense.\n\n### Push notifications with Firebase Cloud Messaging\nThis was one of the most challenging things to implement. Here is why - \n- No official docs on implementing it with React or NextJS\n- Guides/videos on how to implement it with NextJS are very less and even then they are outdated or things don't straight-up work at times\n- Ran into multiple issues when implementing (mainly because I was using Brave to test Notiger and by default, Brave blocks Firebase Cloud Messaging)\n\nFirst of all, I added a service worker that would receive the message in the background (that is, when the application is out of focus or closed) and fire a push notification - \n`firebase-messaging-sw.js` - \n```js\nimportScripts(\"https://www.gstatic.com/firebasejs/9.6.7/firebase-app-compat.js\")\nimportScripts(\"https://www.gstatic.com/firebasejs/9.6.7/firebase-messaging-compat.js\")\n\nconst firebaseConfig = {\n  apiKey: # Retrieve from the Firebase Console,\n  authDomain: # Retrieve from the Firebase Console,\n  projectId: # Retrieve from the Firebase Console,\n  storageBucket: # Retrieve from the Firebase Console,\n  messagingSenderId: # Retrieve from the Firebase Console,\n  appId: # Retrieve from the Firebase Console\n};\n\nconst app = firebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging(app);\n\nmessaging.onBackgroundMessage((payload) => {\n  console.log(\"Notification payload: \", payload);\n\n  return self.registration.showNotification(payload.data.name || \"New Event\", {\n    body: payload.data.description || \"\",\n  });\n})\n```\n\nI have also added a handler for foreground notifications (that is when the application is in focus) that would create a toast - \n```ts\nuseEffect(() => {\n    import(\"../lib/firebase\").then(({ messaging }) => {\n      onMessage(messaging, payload => {\n        toast.custom(t => <EventToast t={t} payload={payload} />);\n      });\n    });\n  }, []);\n```\n\nI had to import messaging dynamically on the client-side here as it was getting imported on the server-side during building and was throwing errors.\n\n### How are events handled?\nI am using NextJS API routes for the backend of the application and any webhooks are posted to the events API routes, `/api/events`\n\nHere is the code for handling events - \n```ts\ntry {\n    const apiKey = req.headers[\"x-api-key\"] || req.query.apiKey;\n    if (!apiKey) {\n        return res.status(400).json({\n            error: \"Missing API key\",\n        });\n    } else if (!(await ApiKey.exists({\n            key: apiKey\n        }))) {\n        return res.status(400).json({\n            error: \"Invalid API key\",\n        });\n    } else {\n        const streamIdFormatted = new ObjectId(streamId as string);\n        const body = req.body;\n        if (typeof body === \"object\") {\n            if (sizeof(body) <= 16384) {\n                const event = new Event({\n                    streamId: streamIdFormatted,\n                    ...body,\n                });\n\n                event.save((err, event) => {\n                    if (err) {\n                        res.status(500).json({\n                            error: err.message\n                        });\n                    } else {\n                        res.status(200).json(event);\n                    }\n                });\n\n                const stream = await Stream.findOne({\n                    _id: streamIdFormatted,\n                });\n\n                const registrationTokens = await FCMToken.find({\n                    ownerId: stream.ownerId,\n                });\n\n                if (registrationTokens.length > 0) {\n                    messaging\n                        .sendMulticast({\n                            data: body,\n                            tokens: registrationTokens.map(token => token.token),\n                        })\n                        .then(res => console.log(res));\n                }\n            } else {\n                throw new Error(\"Body too large. Keep it under 16384 bytes\");\n            }\n        } else {\n            throw Error(\"Body must be an object (json)\");\n        }\n    }\n} catch (error) {\n    res.status(400).json({\n        error: error.message\n    });\n}\n```\n\nFirst of all, everything is wrapped in a `try...catch` block so that we return an error in case something goes wrong.\n\nIn the `try` block, we are looking for 2 parameters, the `streamId` and the `apiKey`. The `streamId` must be passed in as a query parameter to the application. The `apiKey` should be passed in as a the `x-api-key` header usually but in case it is not possible, it can also be passed in as a query parameter. Here is how the requests will look like - \n\nWith the API key passed in as a header - \n```sh\ncurl --location --request POST 'https://www.notiger.xyz/api/events?streamId=<STREAM_ID>' \\\n--header 'x-api-key: <API_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"name\": \"Test Event\",\n    \"description\": \"Test Description\",\n    \"icon\": \"üéá\"\n}'\n```\n\nWith the API key as a query parameter - \n```sh\ncurl --location --request POST 'https://www.notiger.xyz/api/events?streamId=<STREAM_ID>&apiKey=<API_KEY>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"name\": \"Test Event\",\n    \"description\": \"Test Description\",\n    \"icon\": \"üéá\"\n}'\n```\n\nDo note that you can send this POST request from other programming languages as well. Like with JavaScript, for instance, you can use `axios` or with Python, you can use `requests`.\n\nIf the API key is valid, we save the event to the database, given that the event payload is under 16 kilobytes in size and is in the form of a JSON object. This is to prevent spam. Checks for `streamId` is done beforehand itself. \n\nAfter saving the event to the database, we retrieve the stream associated with the event and then the Firebase Cloud Messaging registration tokens associated with the owner of the stream. This is needed to send the notifications to the devices with notifications enabled the user has. Next, we send the notification.\n\n### Understanding the event payload\nWhenever a webhook is fired, a payload is passed in as well. Notiger will accept all payloads under 16 kilobytes which are in the form of a JSON object. This payload usually contains more details about an event. For example, in the case of a build success event on Netlify, it contains information about the site, the time it was published, the deployed URL, the serverless functions deployed to AWS Lambda, and many more. \n\nNotiger also adds an `_id`, `__v` and `streamId` field to each event. The `_id` field is the id of the event stored in MongoDB. In fact, the date it was created can also be retrieved from it.\n\nCode to retrieve created timestamp of a MongoDB document - \n```ts\nconst getCreatedAtFromMongoId = (mongoId: string): string => {\n  return format(new Date(parseInt(mongoId.substring(0, 8), 16) * 1000), \"PPpp\");\n};\n```\nI go over it in more detail in this [tweet](https://twitter.com/AnishDe12020/status/1497067113969709059)\n\nThe `__v` field is the version of the document and increments whenever it is updated. The `streamId` field is the id of the stream the event belongs to.\n\n## ‚öóÔ∏è Use cases\nWhat are the applications where Notiger can be used?\n\nI have already gone over the example of the contact form and Netlify build notifications. There are, however, many more use cases, some quite advanced - \n\n### IoT Devices\nAs smart home devices and other IoT devices are getting more popular and common, one is looking for making better use of them. When a specific event occurs, like say when the temperature goes above 30¬∞C in a lab environment, an event can be triggered that will push a notification to, say, the lab owner's phone so that they can take immediate action. \n\n### Manufacturing\nMany manufacturing tasks often take a long time and notifications can help here too. Say, there is a 3D print going on and as soon as it is done, the 3D printer can fire a webhook notifying the owner that the print is done. It can also be used in cases of mechanical failures etc.\n\n### R&D\nComplex computational operations take a long time and, here as well, notifications can be fired in case of failures, successes, etc.\n\n### SaaS\nSaaS owners often want to get a real-time feed of the number of sign-ups, paid users, etc. on their applications. Notifications can be fired on events such as sign-ups, plan upgrades, bug reports, etc.\n\n## üñ±Ô∏è How to use Notiger?\nOne of my goals with Notiger was to make it as easy to use as possible. Let us go through a mini-guide on how to use it\n\nThe first step is to sign up by clicking the login button at the top-right corner or visiting [`/auth`](https://www.notiger.xyz/auth?callbackUrl=/). Here, you will be prompted to sign in with Google.\n\nNext, head over to the [dashboard page](https://www.notiger.xyz/dashboard) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115285234/-uhf914Mg.png)\n\nNext, create a project - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115337757/HQ68CjfxE.png)\n\nClick on the project and you should be taken to the project page. Here is how it should look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646119189582/kI4gw9JH-.png)\n\nNow, let us create a stream - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115514509/mdzua37wh.png)\n\nUpon clicking on the stream, we can see that there are no events yet - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115551814/a3ws9wzdj.png)\n\nWe can see the API route by clicking on the button that says \"See API Route\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115616742/pMwU3z01n.png)\n\nThis will be used when sending webhook notifications.\n\nNow that we have copied the URL, we can head over to generate an API Key - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646115705763/ANMmAGRZC.png)\n\nCopy this value as well.\n\nFor this example, I am going to be using Postman to send a webhook but in a real-world scenario, it will likely be sent from code or a shell script.\n\nHere is how we do it from Postman - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646116025556/3f0PShNh7.png)\n\nAlso, don't forget to add a payload. It may look something like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646116735741/9DIHYUjdp.png)\n\nDo note that you can pass in the API key as a query parameter called `apiKey` as well. Now click on \"Send\".\n\nWe will get back a response, somewhat like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646116690269/KAMFowtzQ.png)\n\nAlso, now if we check our stream in the Notiger projects dashboard, we will be able to see the event - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646116852330/fYEjPZzhf.png)\n\nTo enable notifications, click the bell on the bottom-right corner - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1646116887226/GtcX71v0I.png)\n\n\n## ‚ú® Conclusion\nIt had been an amazing journey building Notiger, squashing bugs, and writing this blog post! Can't wait to see how this side project does in the days to come!\n\nBye, and have a nice day üòÅü§û\n\n## üîó Important Links\n- [Notiger](https://www.notiger.xyz/)\n- [Notiger GitHub Repository](https://github.com/AnishDe12020/notiger)\n- [Netlify](https://www.netlify.com/)","readingTime":{"text":"12 min read","minutes":11.79,"time":707400,"words":2358},"wordCount":2358},{"_id":"620e213025673f2740eebc69","slug":"privacy-friendly-website-analytics-with-umami-and-nextjs","title":"Privacy friendly website analytics with Umami and NextJS","brief":"Website analytics is truly a very important thing. We can understand our audience well and can tailor our content to our audience for higher engagement. Google Analytics had always been the go-to solution as it is popular, easy to set up, and gives a...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1645091755632/-NyymMbeL.png","dateAdded":"2022-02-17T10:19:28.199Z","contentMarkdown":"Website analytics is truly a very important thing. We can understand our audience well and can tailor our content to our audience for higher engagement. [Google Analytics](https://analytics.google.com/) had always been the go-to solution as it is popular, easy to set up, and gives a lot of data.\n\nHowever, Google Analytics has got its own set of issues. One must ask for a cookie consent to use Google Analytics as Google Analytics uses cookies. The Google Analytics script is also quite big and is known to slow down websites. There have been recent allegations against Google Analytics for not being privacy-friendly and [many European authorities have also found it breaching GDPR](https://techcrunch.com/2022/02/10/cnil-google-analytics-gdpr-breach/).\n\nSo, what is the solution?\n\nOver the years, many privacy-friendly analytics solutions have emerged including [Fathom Analytics](https://usefathom.com/), [Plausible Analytics](https://plausible.io/), and [Umami Analytics](https://umami.is/). The last 2 are open-source and all 3 of them are cookie-less and have a lightweight script that should not affect website load times.\n\nWe are going to be focusing on Umami in this article\n\n## A little bit about Umami\nUmami is an open-source self-hosted analytics service. This means the source code can be accessed by anyone and one must host it themselves. Now, you might say that this costs money and it is not free but today we are going to look at how we can host it for free. Also, Umami uses NextJS API routes for the backend and hence it can run on any serverless architecture. We are going to be looking at setting it up on [Railway](https://railway.app/) today, however, it can also be hosted on [Vercel](https://vercel.com/dashboard) or [Netlify](https://www.netlify.com/). We are also going to look at adding analytics to a NextJS application.\n\nYou can see a [live demo of the platform here](https://app.umami.is/share/8rmHaheU/umami.is)\n\nFun fact: [Hashnode](https://hashnode.com/) also uses Umami and is rolling out an Umami dashboard as advanced analytics üòé\n\nYou can see the [public analytics for my blog here](https://stats.hashnode.com/share/VDldVSkU/9f4dd26c-c7e6-4fa1-88aa-87d90a0dba43)\n\n## Hosting Umami for free on Railway\n[Railway](https://railway.app/) is an awesome hosting platform that lets you host applications quickly and easily. The free plan allows usage of up to $5/month which should be good enough for a few small to medium-sized websites.\n\nIn fact, I have been using it for the past 3-4 months and it has been an amazing experience. My usage costs are usually lower than $2/month and hence I have never paid anything. You don't even need to link your credit card!\n\nMy usage this month (3 websites) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645083158123/UEZNXrJL_.png)\n\nYou can also link a credit card to get $10 of usage per month for free (you will be charged for anything above that).\n\nYou can sign up [here](https://railway.app?referralCode=AnishDe12020)\n\n### Setting up the project on Railway\n\nWe are going to follow the [official guide on hosting it on Railway](https://umami.is/docs/running-on-railway)\n\nFirst of all, we must fork the repository. This will help us make changes to the source code to fit our own needs and more importantly, receive updates in the future (as we will see later in the tutorial). Head over to the [Umami GitHub repository](https://github.com/mikecao/umami) and click on fork on the top-right corner - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645084023444/UIfe4bLPm.png)\n\nYou may be asked to select your personal account or an organization if you are in any. I would recommend going for personal account unless it is for an organization.\n\nOnce you have signed up for an account, click on \"New Project\" (note that I already have an existing project and hence the layout looks like this. It may be different for you) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645083729581/NrhvEnIUM.png)\n\nNow, select \"Deploy from Repo\" on the new project screen - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645084230742/IsU6U7Fb2.png)\n\nDo note that if you didn't sign up with GitHub, you will be prompted to connect your GitHub account.\n\nSearch and select Umami there.\n\nMake sure that the master branch has been selected. Now click on deploy - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645085133125/PEO4Np0hp.png)\n\nThis might take some time (2-5 minutes).\n\nThis is how it should look like after deploying (do note that I am currently using the Metro UI and the layout might look a little different) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645085314989/SGu2FefSM.png)\n\nNow, we need to add a database. We are going to be using PostgreSQL for this example. Now, Railway has built-in support for databases and hence we can spin up a PostgreSQL instance within Railway itself for free.\n\nClick on this \"New\" button - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645085285069/quu1-MwRS.png)\n\nSelect \"Databases\" and then select \"PostgreSQL\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645085252955/_pxkdwdGj.png)\n\nThis might take some time as well.\n\nDo note that if you are using the old UI, you have to select the \"Add Plugin\" button.\n\nNow, we need to add two environment variables, `PORT` and `HASH_SALT`. Click on the card that says \"umami\" and go to the \"Variables\" tab - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645085586275/6b3hX2IJX.png)\n\nIn the old UI, there will be a button called \"Variables\" in the sidebar. Click that and then add the following variables under \"custom\".\n\nWe need to put a random string for the `HASH_SALT` environment variable. Use any random string generator like [this one](https://devkit.one/generators/random-string). Let us go with 20 characters including uppercase and lowercase letters, numbers, and symbols - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645086073622/Oaa9dkb2U.png)\n\nNow paste that into Railway and click \"Add\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645086092990/Z5TMAndNtH.png)\n\nAlso, add an environment variable called `PORT` and set it to `3000` - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645086013249/TBX1KtxPZ.png)\n\nNote that Railway will redeploy our application every time we add an environment variable.\n\n\n### Setting up our database schema\n\nNow, we need to make tables in our database. For this, we need to locally clone the project. Go ahead and clone it with git and open a terminal in that repository (I am using the GitHub CLI to clone here but you can use `git` as well) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645086274311/ESnkCPq02.png)\n\nNow, we need to [install the Railway CLI](https://docs.railway.app/develop/cli). You can install it with NPM with the following command - \n```\nnpm i -g @railway/cli\n```\nYou can also install it with [Homebrew](https://brew.sh/) with the following command - \n```\nbrew install railwayapp/railway/railway\n```\n\nNow run the following command to authenticate the CLI with your Railway account - \n```\nrailway login\n```\nNote that if you face any issues while doing this, you can also try logging in with the following command -\n```\nrailway login --browserless\n```\nNow run the following command to link the local directory with your Railway project - \n```\nrailway link\n```\n\nNow head over to Railway and click the PostgreSQL card and go to the \"Variables\" tab - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645086844780/5Z7sCtfB6.png)\n\nNow run the following command in the terminal - \n```\nrailway run psql -h PGHOST -U PGUSER -d PGDATABASE -f sql/schema.postgresql.sql\n```\nReplace the values caps with their corresponding values from the Railway dashboard (from the environment variables tab for PostgreSQL from the previous step)\n\nNow press enter to run the command.\n\nDo note that you need the PostgreSQL CLI for this. If you don't have it, you can follow [this guide to install it](https://www.timescale.com/blog/how-to-install-psql-on-mac-ubuntu-debian-windows/).\n\nNow run the following command to deploy it - \n```\nrailway up\n```\n\nHooray, we have successfully deployed Umami ü•≥\n\n## Using Umami\n\nAfter deploying, you will get an URL to deployment logged on to your CLI. You can also retrieve this URL from the Railway web app.\n\nYou can also set up a custom subdomain (or even a custom domain) from the Umami dashboard - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645087633934/7mcDLz429.png)\n\nYou will see a login screen now. The username is \"admin\" and the default password is \"umami\" (we will change this).\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645087925651/mO7f7rbEO.png)\n\nOur dashboard should look like this now - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645087905782/XJLyLBPL1.png)\n\nNow, there is a banner saying there is a new version out! While writing this tutorial, [Mikecao](https://github.com/mikecao), the creator of Umami, pushed a new version üòÖ\n\nNow, that is a good thing because now I get to show you how to update Umami üòé\n\nBefore that, let us just quickly change our password as \"umami\" isn't a secure password.\n\nHead over to Settings --> Profile and click on \"Change Password\"\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645088278499/VheBGhUUXY.png)\n\nEnter \"umami\" in the \"Current Password\" field and then set a new secure password and click \"Save\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645088387324/VmfJRvZft.png)\n\n### Updating Umami\n\nHead over to the forked Umami repository on GitHub. You should see that our branch is behind by a few commits - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645088470198/r7hgqcKVi.png)\n\nClick on \"Fetch Upstream\" and then \"Fetch and merge\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645088510722/8sBS4wExL.png)\n\nThat is it! A new deployment will be initiated on Railway and in a few minutes, you should be up and running the latest version - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645088575876/UhIEb2SZl.png)\n\n## Adding Umami to a NextJS website\n\nNow, let us look at adding Umami to a NextJS website. For this let us first create a new NextJS application (note that it will work with existing NextJS applications as well) - \n```\nnpx create-next-app umami-tutorial\n```\n\nLet us now move into that directory - \n```\ncd umami-tutorial\n```\n\nNow, open it in your favorite text editor. We will be using VSCode for this tutorial - \n```\ncode .\n```\n\nNow, open the `pages/_app.js` file. It should look like this - \n```js\nimport '../styles/globals.css'\n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\nNow, let us add the script tag for Umami. This is how our `_app.js` should look like now - \n```js\nimport Script from \"next/script\";\nimport \"../styles/globals.css\";\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <>\n      {process.env.NEXT_PUBLIC_UMAMI_SCRIPT_URL &&\n        process.env.NEXT_PUBLIC_UMAMI_WEBSITE_ID && (\n          <Script\n            src={process.env.NEXT_PUBLIC_UMAMI_SCRIPT_URL}\n            data-website-id={process.env.NEXT_PUBLIC_UMAMI_WEBSITE_ID}\n            strategy=\"lazyOnload\"\n          />\n        )}\n      <Component {...pageProps} />\n    </>\n  );\n}\n\nexport default MyApp;\n```\n\nHere, we are using the [NextJS Script component](https://nextjs.org/docs/api-reference/next/script) and lazy loading the script so that it doesn't block our website from loading.\n\nWe will also need to add the environment variables but before that, we need to add the website to Umami. \n\nHead over to Umami and then to Settings --> Websites - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090114917/h3EVdgmDM.png)\n\nNow, click on \"Add website\"\n\nI am naming this \"Umami Tutorial\" but you can name it whatever you want to. In the next field, make sure to enter the domain and NOT THE URL to the website. Note that I have quickly created a GitHub repository and deployed this NextJS app to [Vercel](https://vercel.com/). I have also checked \"Enable Share URL\" so that I can share the analytics for this website with you guys üòÅ\n\nHere it is - [https://umami-tutorial.up.railway.app/share/3lOPyajp/Umami%20Tutorial](https://umami-tutorial.up.railway.app/share/3lOPyajp/Umami%20Tutorial)\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090318295/8b01p6l-xH.png)\n\nNow, click on \"Save\" and then \"Get tracking code\" - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090384630/csMsmGMW7.png)\n\nFrom the modal that appears, just copy the values of `data-website-id` and `src` - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090430194/_Ep6VvsVs.png)\n\nNow, create a new file in your NextJS app called `.env.local` and add the following environment variables - \n```\nNEXT_PUBLIC_UMAMI_SCRIPT_URL= # Your script URL, the value under `src`\nNEXT_PUBLIC_UMAMI_WEBSITE_ID= # The website's id, the value under `data-website-id`\n```\n\nNow, visit the website on your browser and take a look at the Umami dashboard, it should record a view and a visit under the \"Realtime\" tab - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090808765/DClWJJP28.png)\n\nWe can see more detailed analytics under the details page of the website - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1645090870636/yVqIm4_VA.png)\n\nMore data will pile up as you start getting visitors on your site\n\nNote: Some browsers like brave have in-built ad-blockers which blocks such scripts from loading in many cases. Even third-party ad-blockers can be responsible for this. If no data is showing up in your Umami dashboard, try a browser without ad-blockers (or private mode), try restarting your development server, and make sure that the values of the environment variables are right.\n\nWoohoo, that was a lot!\n\n## Conclusion\nWe got Umami set up and running and added analytics to a NextJS application. Umami does a lot more like recording events. Take a look at [their documentation for more information](https://umami.is/docs)\n\nI hope everything worked out for you. Do feel free to comment on this article or reach out to me on [Twitter](https://twitter.com/AnishDe12020) and I will help you out üòÑ\n\n## Important Links\n- [Umami](https://umami.is/)\n- [Umami Docs](https://umami.is/docs/about)\n- [Official guide on setting up Umami on Railway](https://umami.is/docs/running-on-railway)\n- [Railway](https://railway.app/)\n- [Repository for this tutorial](https://github.com/AnishDe12020/umami-tutorial)\n- [Demo website for this tutorial](https://umami-tutorial.vercel.app/)\n- [Public analytics for the demo website](https://umami-tutorial.up.railway.app/share/3lOPyajp/Umami%20Tutorial)","readingTime":{"text":"10 min read","minutes":9.775,"time":586500,"words":1955},"wordCount":1955},{"_id":"61f7c1fc00273a7c1776d65a","slug":"twnft-mint-your-tweets-as-nfts-easily-and-for-free","title":"TwNFT - Mint your tweets as NFTs easily and for free","brief":"ü§î What is TwNFT?\nTwNFT is a simple web application that allows you to mint your tweets as NFTs for free.\nIt is my submission for the Thirdweb x Hashnode Hackathon.\nLive Demo / GitHub Repository\nüåê What is Thirdweb?\nGetting started with web3 can be d...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1643626826069/Py_29X16z.png","dateAdded":"2022-01-31T11:03:24.422Z","contentMarkdown":"![let-us-get-started-minions](https://cdn.hashnode.com/res/hashnode/image/upload/v1643621521059/4bLysGMEz.gif)\n\n## ü§î What is TwNFT?\n\nTwNFT is a simple web application that allows you to mint your tweets as **NFTs** for free.\n\nIt is my submission for the [Thirdweb x Hashnode Hackathon](https://townhall.hashnode.com/thirdweb-hackathon).\n\n[Live Demo](https://twnft.vercel.app/) / [GitHub Repository](https://github.com/AnishDe12020/twnft)\n\n## üåê What is Thirdweb?\n\nGetting started with web3 can be difficult even though it is the hype nowadays. We need to write something called a smart contract, which is required to perform actions on the blockchain. To write smart contracts on the Ethereum blockchain, we need to learn a new programming language called [Solidity](https://soliditylang.org/).\n\n[Thirdweb](https://thirdweb.com/) provides us with smart contracts which have been written by professionals in the field. They also provide us SDKs which makes using these easy. This allows people with basic programming knowledge to make web3 applications with ease. Thirdweb also takes care of deploying these smart contracts to the blockchain.\n\nLet us now go back to TwNFT\n\n## üí°Where did the idea come from?\nThis hackathon was announced back on the 5th of January, 2022 but I didn't get a solid idea until the 18th of January. So where did it come from?\n\nI came across an application called [GitNFT](https://gitnft.quine.sh/) from one of @[Chris Bongers](@dailydevtips)'s articles. GitNFT lets you mint git commits as NFTs and that is when I thought, \"How about minting tweets as NFTs?\". \n\nI did some research and didn't find any application that did this so it was a golden opportunity for me ü§©\n\n\n## üìö The tech stack\nWhat technologies did I use for TwNFT?\n- [NextJS](https://nextjs.org/) for the website\n- [TailwindCSS](https://tailwindcss.com/) for styling\n- [Firebase](https://firebase.google.com/) for Twitter authentication and data storage\n- [Vercel](https://vercel.com/) for deploying the frontend\n- [Express](https://www.npmjs.com/package/express) for the backend API\n- [Heroku](https://dashboard.heroku.com/apps) to deploy the backend\n\nand of course...\n- [Thirdweb](https://thirdweb.com/) for web3 authentication and minting the NFT\n\n## üßê How does TwNFT work?\n\nOne needs to first sign in with Twitter and then put in the tweet URL for the tweet they want to mint. Before minting, the image that will be minted can also be customized. One needs to assign a name to the NFT and optionally add a description (or else, the tweet's content will be used).\n\nBefore minting, we have 2 checks to ensure that the person minting the NFT owns that tweet (this is why they are asked to log in with Twitter) and if the tweet has been minted before or not. We don't allow minting the same tweet multiple times, and this is to ensure that every NFT minted is unique. \n\nNow let us take a deeper dive into the web3 part\n\n### A deeper dive into web3 authentication with Thirdweb\n\nSetting up authentication with Thirdweb is as easy as adding ~10 lines of code. I am using the [`@3rdweb/hooks`](https://www.npmjs.com/package/@3rdweb/hooks) package for this application and it is a breeze. The [`@3rdweb/react`](https://www.npmjs.com/package/@3rdweb/react) package is easier to implement as it also packs in the UI. However, if you want a custom UI (which I wanted), the hooks package is a better choice.\n\nDo note that you need to be using [ReactJS](https://reactjs.org/) to use any of the aforementioned packages.\n\nComing to the code, firstly, you need to add the Thirdweb Provider to the application - \n```jsx\nimport { ThirdwebWeb3Provider } from \"@3rdweb/hooks\";\n\nconst connectors = {\n  injected: {},\n  walletconnect: {},\n};\n\nconst supportedChainIds = [1, 4, 137, 250, 43114, 80001];\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <Component {...pageProps} />\n    </ThirdwebWeb3Provider>\n  );\n}\n```\n\nThen, it is as easy of using the `useWeb3()` hook provided to us by either packages to retrieve the `connectWallet` function. We have to now just call this function with the wallet type - \n```jsx\n<button\n  onClick={() => {\n    connectWallet(\"injected\");\n  }}\n  >\n  Login with Metamask\n</button>\n```\n\nHere `injected` is for the wallet injected in the browser. This is [Metamask](https://metamask.io/) in most cases.\n\nFor a detailed guide on implementing web3 authentication with Thirdweb, check out their [official guide](https://thirdweb.com/portal/guides/sign-in-with-ethereum-using-thirdweb-connectwallet).\n\n### A deeper dive into minting the NFT with Thirdweb\nI am using the [Thirdweb Typescript SDK](https://www.npmjs.com/package/@3rdweb/SDK) for minting the NFT on the server-side. Minting should take place on the server-side for security reasons.\n\nMinting with the Thirdweb SDK is extremely easy. Let us see how it works - \n\nFirst, we initialize the SDK with our private key. Do keep this secret as anyone who has your private key can gain access to your wallet. I am using [`ethers`](https://www.npmjs.com/package/ethers) for initializing a wallet here.\n```ts\nconst SDK = new ThirdwebSDK(\n  new ethers.Wallet(\n    process.env.PRIVATE_KEY,\n    ethers.getDefaultProvider(\"https://rinkeby-light.eth.linkpool.io/\")\n  )\n);\n```\n\nNext, we initialize the NFT Module that will let us mint the NFT - \n```ts\nconst nftModule = sdk.getNFTModule(process.env.NFT_MODULE_ADDRESS);\n```\n\nAt last, we call the `mintTo` function asynchronously - \n```ts\nconst result = await nftModule.mintTo(\n  payload.receiverAddress,\n  nftMedatada\n);\n```\n\nHere the result gives us the NFT's `tokenId`. The `tokenId` is a unique identifier for the NFT in that collection. \n\nNow, that is it. We have minted an NFT!!!\n\nFor a more detailed guide, you can check out Thirdweb's [official guide on minting an NFT](https://thirdweb.com/portal/guides/mint-nft-collection-using-typescript-sdk).\n\n### ‚ùì What was this NFT Module?\nThirdweb provides us with many modules and the NFT Collection module is one of them. It allows you to mint an NFT in an NFT collection and that is what we just did!!! \nThe official collection for this project can be found on OpenSea [here](https://testnets.opensea.io/collection/twnft).\n\n## üñ±Ô∏è Using TwNFT\n\nTo get started, log in with Twitter and head over to the [/mint](https://twnft.vercel.app/mint) page. \n\nNext, put in the URL to the tweet you want to mint in the textbox on the top and click the arrow -\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643624998718/ui-X376Lf.png)\n\nYou should now see a preview of the NFT, something a bit like this - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625030434/G2CF1HC0ZQ.png)\n\nFeel free to customize the image by clicking on the buttons on the options bar - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625193144/G3fFrq2n1.png)\n\nNext, click on the \"Connect Wallet\" button and connect your Metamask wallet. Walletconnect support is coming soon.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625230012/X2U4fiR74.png)\n\nYou should now see a button saying \"Mint NFT\" instead of \"Connect Wallet\" on the options bar. Clicking that should bring up this modal where you can fill out the name of the NFT, and optionally add a description - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625284907/1qDxme8Wh.png)\n \nAfter some time, you should get the option to go to the tweet page - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625434052/po2NcD7zd.png)\n\nThe tweet page will look somewhat like this (do give the image some time to load for the first time) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625465700/gVijzcG5w.png)\n\nNotice that it says the NFT is still being minted and it is going to take 5-10 minutes. Check back after 5-10 minutes and this is what the page should look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1643625506211/EFaHw8vDeU.png)\n\nThe NFT is now under your wallet and you can do anything with it, including listing it for sale, selling it, and even transferring it to another wallet. \n\n## üñäÔ∏è Sidenote\nCurrently, TwNFT is running on the Rinkeby Test Network. This means all NFTs minted will be on the test network and not on the main network.\n\nHowever, this is subject to change in the future.\n\n## ‚ú® Conclusion\nIt has been a great journey over the last 13 days making TwNFT, squashing bugs, and implementing features. Excited to see how it goes üòÜ\n\nBye, and have a nice day üòÅü§û\n\n## üîó Important Links\n- [TwNFT](https://twnft.vercel.app/)\n- [TwNFT GitHub Repository](https://github.com/AnishDe12020/twnft)\n- [TwNFT Backend GitHub Repository](https://github.com/AnishDe12020/twnft-backend)\n- [TwNFT OpenSea collection](https://testnets.opensea.io/collection/twnft)","readingTime":{"text":"7 min read","minutes":6.055,"time":363300,"words":1211},"wordCount":1211},{"_id":"61c2b52c5ca9b60b25c5b192","slug":"how-to-make-a-back-to-top-button-and-page-progress-bar-with-html-css-and-javascript","title":"How to Make a Back to Top Button and Page Progress Bar with HTML, CSS, and JavaScript","brief":"This article was first posted on Freecodecamp on the 21st of December, 2021. Link - https://www.freecodecamp.org/news/back-to-top-button-and-page-progressbar-with-html-css-and-js/\n\nYou've probably seen a \"back-to-top\" button at the bottom-right corne...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1640144896880/b4sCz6SdF.png","dateAdded":"2021-12-22T05:18:36.494Z","contentMarkdown":"> This article was first posted on Freecodecamp on the 21st of December, 2021. Link - https://www.freecodecamp.org/news/back-to-top-button-and-page-progressbar-with-html-css-and-js/\n\nYou've probably seen a \"back-to-top\" button at the bottom-right corner on many websites when you're scrolling around. Clicking on that button takes you back to the top of the page.\n\nThis is a great feature to have on any website, and today we are going to see how to build it with nothing but HTML, CSS, and JavaScript.\n\nWe are also going to look at how to add a page progress bar, one at the top which will increase in progress as we scroll down and decrease as we scroll up.\n\nNote that you can add this to any website, whether it's an existing one or something you have just started working on. The only requirement is that the website should have enough content (or a big enough body height) to be scrollable, or else it will not make sense to add this.\n\nHere is the CodePen of what we are going to build (scroll to see the magic):\n\n%[https://codepen.io/anishde12020/pen/poWPPoe]\n\n## How to Make a Back to Top Button for Your Website\n\nFirst of all, I am going to make the body of the website huge so that it can be scrolled:\n\n```css\nbody {\n  height: 5000px;\n}\n```\nI am also going to add a linear gradient to the document body so that we can know that the document is being scrolled:\n\n```css\nbody {\n  height: 5000px;\n  background: linear-gradient(#00ff04, #09aad3);\n}\n```\nLet's also quickly add the Back To Top button to the markup:\n\n```html\n<button class=\"back-to-top\">Back To Top</button>\n```\nLet's also position the button like this:\n\n```css\n.back-to-top {\n  position: fixed;\n  right: 2rem;\n  bottom: 2rem;\n}\n```\n\nHere, we are giving it a fixed position so that it remains in view even if the document is scrolled. We are pushing it `2rem` from the bottom and right side of the screen as well.\n\nThis is how our document should be looking like now:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1640147340388/eZ59pcQvi.png)\n\nNow, it is time for the fun part ‚Äì adding the logic.\n\n### How to only show the Back To Top button on scroll\n\nNow, we don't want the Back To Top button to be visible all the time ‚Äì like when the user is at the top of the page. So we are going to show it conditionally.\nFor this example, we are only going to show it when the user has scrolled at least 100 pixels.\n\nFirst of all, we need to hide the button whenever the user opens the site. We also need to make sure that we add this style, separate from the button's base styles, as the button needs to be shown on scroll.\n\nHTML:\n\n```html\n<button class=\"back-to-top hidden\">Back To Top</button>\n```\n\nCSS:\n\n```css\n.hidden {\n  display: none;\n}\n```\n\nHere's the code for conditionally showing the button:\n\n```js\nconst showOnPx = 100;\nconst backToTopButton = document.querySelector(\".back-to-top\")\n\nconst scrollContainer = () => {\n  return document.documentElement || document.body;\n};\n\ndocument.addEventListener(\"scroll\", () => {\n  if (scrollContainer().scrollTop > showOnPx) {\n    backToTopButton.classList.remove(\"hidden\")\n  } else {\n    backToTopButton.classList.add(\"hidden\")\n  }\n})\n```\n\nHere, the `scrollContainer` function returns `document.documentElement`, which is nothing but the HTML element of our document. In case that is not available, the `document.body` element is returned instead.\n\nNext, we are adding an event listener to our document that will trigger the callback function on scroll. The `scrollTop` ([MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)) value that we are getting from the respective `scrollContainer` is nothing but the number of pixels that element has been scrolled from the top.\n\nHere, when that value is higher than our set `showOnPx` value, that is `100px`, we remove the hidden class from our button. If that is not the case, we add the class to the button (especially useful for when the user scrolls up manually).\n\nNow, let's work on the logic to scroll to the top whenever the user clicks the button.\n\n### How to scroll to top whenever the user clicks the Back To Top Button\n\nLet's quickly write a function for this:\n\n```js\nconst goToTop = () => {\n  document.body.scrollIntoView();\n};\n```\n\nThe `scrollIntoView()` ([MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)) function scrolls the page to bring the element it is being called upon into view. Here we are calling it on the body so the page will be scrolled to the top.\n\nNow, we need this function to be called whenever the Back To Top Button is clicked:\n\n```js\nbackToTopButton.addEventListener(\"click\", goToTop)\n```\n\nThat's it! We have successfully added the Back To Top functionality to our website.\n\n### How to make the scroll smooth\n\nNow, that back to top scroll was quite harsh. Let's look at making it smoother. We can do this by passing in the `behaviour` as `smooth` to the `scrollIntoView()` function.\n\n```js\nconst goToTop = () => {\n  document.body.scrollIntoView({\n    behavior: \"smooth\",\n  });\n};\n```\n\nThat's it! Now the scrolling is nice and smooth.\n\n### How to style the Back To Top button\n\nRight now, the Back To Top button is a simple HTML button with some text ‚Äì and that looks quite ugly. So let us style it.\n\n\nBefore that, we are going to replace the text with an SVG so let me quickly grab one from [HeroIcons](https://heroicons.com/):\n\n```html\n<button class=\"back-to-top hidden\">\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    class=\"back-to-top-icon\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n    stroke=\"currentColor\"\n  >\n    <path\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      stroke-width=\"2\"\n      d=\"M7 11l5-5m0 0l5 5m-5-5v12\"\n    />\n  </svg>\n</button>\n```\n\nWe give the icon a class called `back-to-top-icon`. This is important as the icon is not visible right away and so needs to be styled in order to be visible.\n\n```css\n.back-to-top-icon {\n  width: 1rem;\n  height: 1rem;\n  color: black;\n}\n```\n\nThis is how our button should look now:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1640147755329/qtFf8nbgS.png)\n\nThe button still looks quite ugly, so let's style it:\n\n```css\n.back-to-top {\n  position: fixed;\n  right: 2rem;\n  bottom: 2rem;\n  border-radius: 100%;\n  background: #141c38;\n  padding: 0.5rem;\n  border: none;\n  cursor: pointer;\n}\n```\n\nNow, the up arrow in our button is not visible, let us change its color to something lighter so that it is visible:\n\n```css\n.back-to-top-icon {\n  width: 1rem;\n  height: 1rem;\n  color: #7ac9f9;\n}\n```\n\nWe can also add a hover effect just to make it a tad better:\n\n```css\n.back-to-top:hover {\n  opacity: 60%;\n}\n```\n\nNow, this is how our button should look:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1640148509869/3sSxu0osA.png)\n\n### How to make the button's entry smoother\n\nThe button seems to appear out of nowhere whenever we scroll. Let's change this behaviour by adding a transition to it and instead of changing the display, we are going to change its opacity:\n\n```css\n.back-to-top {\n  position: fixed;\n  right: 2rem;\n  bottom: 2rem;\n  border-radius: 100%;\n  background: #7ac9f9;\n  padding: 0.5rem;\n  border: none;\n  cursor: pointer;\n  opacity: 100%;\n  transition: opacity 0.5s;\n}\n```\n\n```css\n.hidden {\n  opacity: 0%;\n}\n```\n\nThis also makes our hover effect smoother.\n\nNow let's focus on the page progress bar.\n\n## How to Add a Page Progress Bar to Your Website\n\nWe will be making a progress bar by using a `div`. As the user scrolls through the page, we will determine the percentage scrolled and keep increasing the `width`. Let's add the `div` first and give it a class name of `progress-bar`:\n\n```html\n<div class=\"progress-bar\" />\n```\n\nNow we'll add some styles to it:\n\n```css\n.progress-bar {\n  height: 1rem;\n  background: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n```\n\nWe are making it fixed so that it is visible as the user scrolls. We are also positioning it at the top of the page.\n\n\nNow, let's add the JavaScript that sets the width of the progress bar:\n\n```js\nconst pageProgressBar = document.querySelector(\".progress-bar\")\ndocument.addEventListener(\"scroll\", () => {\n  const scrolledPercentage =\n      (scrollContainer().scrollTop /\n        (scrollContainer().scrollHeight - scrollContainer().clientHeight)) *\n      100;\n  \n  pageProgressBar.style.width = `${scrolledPercentage}%`\n  \n  if (scrollContainer().scrollTop > showOnPx) {\n    backToTopButton.classList.remove(\"hidden\");\n  } else {\n    backToTopButton.classList.add(\"hidden\");\n  }\n});\n```\n\nNote that we are using our existing document scroll event listener function.\n\nThis is how our progress bar should look like when scrolled:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1640149003520/z78kGlhLi.png)\n\n### How to calculate the percentage scrolled\n\nCalculating percentage scrolled is actually quite simple. The `scrollTop` ([MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)) property is the number of pixels scrolled as mentioned earlier.\n\n`scrollHeight` ([MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)) is the minimum height required to fit in all its children in the element it is being called upon.\n\nAnd finally, `clientHeight` ([MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)) is the inner height of the element it is being called upon.\n\nThe `clientHeight` is subtracted from the `scrollHeight` because if we don't do that, the area visible will be taken into account as well so we would never hit 100% scrolled.\n\nI have put together this diagram to explain it better:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1640149482325/gtpVcM6pG.png)\n\nHere, the line without the arrows represents the `clientHeight` which is the height of the content visible to us. The line with the arrows represents the `scrollHeight` and shows that this line continues in both directions. This is the height of the view required to fit in all the content.\n\nAt last, the `scrollTop` value is divided by the difference of `scrollHeight` and `clientHeight` and we get a decimal value of the amount scrolled. This is multiplied by `100` to get the value in percentage that we use to determine the width of the `div`, that is the progress on our progress bar.\n\n## Conclusion\n\nI hope you have found this article helpful and are able to implement a Back To Top Button and a Page Progress Bar on your website.\n\nDo reach out to me on [Twitter](https://twitter.com/AnishDe12020) if you want to ask me anything. The next step would be to implement this on your website and make changes as you see fit.\n\n### Resources\n\n- [CodePen for this example](https://codepen.io/anishde12020/pen/poWPPoe)\n- [MDN Reference for `scrollIntoView()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n- [MDN Reference for `scrollTop`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n- [MDN Reference for `scrollHeight`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)\n- [MDN Reference for `clientHeight`](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n\n> This article was first posted on Freecodecamp on the 21st of December, 2021. Link - https://www.freecodecamp.org/news/back-to-top-button-and-page-progressbar-with-html-css-and-js/","readingTime":{"text":"9 min read","minutes":8.085,"time":485100,"words":1617},"wordCount":1617},{"_id":"61baba8aa2d7d141b3f7b04a","slug":"how-to-use-the-github-repository","title":"How to Use the .github Repository","brief":"Note: This article was first published in the Freecodecamp publication on the 15th of December, 2021. The link to the original article - https://www.freecodecamp.org/news/how-to-use-the-dot-github-repository/\n\nGitHub has many special repositories. Fo...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1639627184519/Yqo5BERsU.png","dateAdded":"2021-12-16T04:03:22.771Z","contentMarkdown":"> Note: This article was first published in the Freecodecamp publication on the 15th of December, 2021. The link to the original article - https://www.freecodecamp.org/news/how-to-use-the-dot-github-repository/\n\n**GitHub has many special repositories. For instance, you can create a repository that matches your username, add a README file to it, and all the information in that file will be visible on your GitHub profile.**\n\nYou might already be familiar with the `.github` directory you'll find in many repositories. The `.github` directory houses workflows, issue templates, pull request templates, funding information, and some other files specific to that project.\n\nBut another special repository you can create is the `.github` repository. It acts as a fallback for all of your repositories that don't have an actual `.github` directory with issue templates and other community health files.\n\nFor example, say I have a repository named `.github` with generic bug report and feature request issue templates. And say I create another repository called `new-project`, but I don't add a `.github` directory with issue templates to it.\n\nThen if someone goes to the `new-project` repo and opens an issue, they'll be presented with an option to choose from the generic templates already in the `.github` directory.\n\nSimilarly, if I add a code of conduct to my `.github` repository, it will be shown across all my repositories that don't explicitly have one.\n\nJust note that the files inside a repository's `.github` directory will be chosen over the ones in the `.github` directory. For example, if my new-project repo has a `.github` directory with a feature request issue template inside, that will be used instead of the generic feature request template from the `.github` repo.\n\nLet's see how this special repository works in action.\n\nNow let us see this in action\n\n## How to Use .github on Personal GitHub Accounts\nCreating this special repository is as easy as creating any other repository on GitHub. So go ahead and open GitHub on your web browser and create the repository like this:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639469936665/Xo__mfEdt.png)\n\nAfter you're done creating the repository, you can start adding files to it. The first file I will add is a bug report issue form. I am not going to go over the details of creating an issue form in this article, but you can have a look at a [previous article I wrote about GitHub Issue forms.](https://blog.anishde.dev/creating-a-bug-report-form-in-github)\n\n`.github/ISSUE_TEMPLATE/bug_report.yml`\n```yml\nname: üêõBug Report\ndescription: File a bug report here\ntitle: \"[BUG]: \"\nlabels: [\"bug\"]\nassignees: [\"AnishDe12020\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report ü§ó\n        Make sure there aren't any open/closed issues for this topic üòÉ\n        \n  - type: textarea\n    id: bug-description\n    attributes:\n      label: Description of the bug\n      description: Give us a brief description of what happened and what should have happened\n    validations:\n      required: true\n      \n  - type: textarea\n    id: steps-to-reproduce\n    attributes:\n      label: Steps To Reproduce\n      description: Steps to reproduce the behavior.\n      placeholder: |\n        1. Go to '...'\n        2. Click on '...'\n        3. Scroll down to '...'\n        4. See error\n    validations:\n      required: true\n  - type: textarea\n    id: additional-information\n    attributes:\n      label: Additional Information\n      description: |\n        Provide any additional information such as logs, screenshots, likes, scenarios in which the bug occurs so that it facilitates resolving the issue.\n```\n\nI am also going to create a feature request form.\n\n`.github/ISSUE_TEMPLATE/feature_request.yml`\n```yml\nname: ‚ú®Feature Request\ndescription: Request a new feature or enhancement\nlabels: [\"enhancement\"]\ntitle: \"[FEAT]: \"\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Please make sure this feature request hasn't been already submitted by someone by looking through other open/closed issues\n  \n  - type: textarea\n    id: description\n    attributes:\n      label: Description\n      description: Give us a brief description of the feature or enhancement you would like\n    validations:\n      required: true\n      \n  - type: textarea\n    id: additional-information\n    attributes:\n      label: Additional Information\n      description: Give us some additional information on the feature request like proposed solutions, links, screenshots, etc.\n```\n\nI am also going to be adding a pull request template.\n\n`.github/pull_request_template.md`\n```md\n<!-- \nThanks for creating this pull request ü§ó\n\nPlease make sure that the pull request is limited to one type (docs, feature, etc.) and keep it as small as possible. You can open multiple prs instead of opening a huge one.\n-->\n\n<!-- If this pull request closes an issue, please mention the issue number below -->\nCloses # <!-- Issue # here -->\n\n## üìë Description\n<!-- Add a brief description of the pr -->\n\n<!-- You can also choose to add a list of changes and if they have been completed or not by using the markdown to-do list syntax\n- [ ] Not Completed\n- [x] Completed\n-->\n\n## ‚úÖ Checks\n<!-- Make sure your pr passes the CI checks and do check the following fields as needed - -->\n- [ ] My pull request adheres to the code style of this project\n- [ ] My code requires changes to the documentation\n- [ ] I have updated the documentation as required\n- [ ] All the tests have passed\n\n## ‚Ñπ Additional Information\n<!-- Any additional information like breaking changes, dependencies added, screenshots, comparisons between new and old behavior, etc. -->\n```\n\nThe last file I am going to be adding is a code of conduct ‚Äì but this is going to be on the root of the repository. Despite that, this will work as intended (code of conduct files are usually kept on the root of the repository). Note that I am using the [Contributor Convent](https://www.contributor-covenant.org/) convention.\n\n`CODE_OF_CONDUCT.md` - \n```md\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[INSERT CONTACT METHOD].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n```\n\nWe can add more files like funding information, contributing guides, and much more. For more information, you can look at the [GitHub docs regarding community health files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file)\n\n### The `.github` repository in action\nMy [blogs repository](https://github.com/AnishDe12020/blog) doesn't have any issue templates, code of conduct, or any other file except for the markdown files of my blogs and a README. So it's the best repository to test upon if this feature is working or not.\n\nI can already see the code of conduct appearing here:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639473735984/4Dk1gl1ZS.png)\n\nIf I try to create an issue, I am presented with the templates as well:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639473797715/5fqH-4IYX.png)\n\nThis will also work when creating a pull request.\n\n\n## How to Use the .github Repository for an Organization/Public Account\n\nThe `.github` repository on an organization account works just like the `.github` repository on a personal GitHub account ‚Äì except there is one difference.\n\nOrganizations can also have profile READMEs that show up on the organization page on GitHub. This README resides on the `profile` directory of the organization's `.github` repository. To demonstrate this, I will quickly create a demo organization.\n\nWhen creating the `.github` repository for an organization, you should get this message:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639473052293/s2QEAhtHG.png)\n\nAlso when adding the profile README to `profile/README.md`, you should be getting this message:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639473117849/vf0IEmbTH.png)\n\nNow, I am going to add some content to that README file and commit it. When I visit the organization's home page this is what we should see:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639473242631/svqbJ3PfG.png)\n\n## Conclusion\n\nI hope you now know what the `.github` repository does. You should also know how to set up default community health files for your repositories and a profile README for your organization.\n\nFeel free to reach out to me on Twitter and have a nice day üòÉ\n\n## Resources\n- [GitHub Documentation on Community Health Files](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/creating-a-default-community-health-file)\n- [My `.github` repository](https://github.com/AnishDe12020/.github)\n- [My test organization's `.github` repository](https://github.com/AnishDe12020-test/.github)\n- [Contributor Convent](https://www.contributor-covenant.org/)\n- [Article on getting started with GitHub issue forms](https://blog.anishde.dev/creating-a-bug-report-form-in-github)\n\n\nI am currently working on a project called DevKit which is a PWA that will house developer tools in one single application and provide ways to get your work done quickly. Do check it out at [https://www.devkit.one/.](https://www.devkit.one/)\n\n> Note: This article was first published in the Freecodecamp publication on the 15th of December, 2021. The link to the original article - https://www.freecodecamp.org/news/how-to-use-the-dot-github-repository/\n","readingTime":{"text":"11 min read","minutes":10.08,"time":604800,"words":2016},"wordCount":2017},{"_id":"61b4a51db055806a4b00de8d","slug":"adding-an-in-browser-code-preview-to-your-react-application-with-sandpack","title":"Adding an in-browser code preview to your React Application with Sandpack","brief":"Sandpack is a live coding environment that runs on the browser. It is made by the team behind CodeSandbox. The main objective here is to provide interactive examples to play around with, to users. I see it being widely used in things like blog posts ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1639228519537/gLvn_u4gu.png","dateAdded":"2021-12-11T13:18:21.826Z","contentMarkdown":"[Sandpack](https://sandpack.codesandbox.io/) is a live coding environment that runs on the browser. It is made by the team behind [CodeSandbox](https://codesandbox.io/). The main objective here is to provide interactive examples to play around with, to users. I see it being widely used in things like blog posts and documentation (in fact the, work in progress, [new React Docs](https://beta.reactjs.org/learn) is using Sandpack). In this article, we are going to look at how to add Sandpack to a React Application and then we will look at integrating it with [Next MDX Remote](https://github.com/hashicorp/next-mdx-remote) in a NextJS Application.\n\n## Adding Sandpack to our Project\n\nWe are going to be adding Sandpack to a react application (made with [create react app](https://github.com/facebook/create-react-app)) though the process should be quite the same for NextJS or Gatsby. \n\nCreate a starter react project and navigate into it - \n```sh\nnpx create-react-app sandpack-demo\ncd sandpack-demo\n```\n\n> Note: Feel free to use the Yarn package manager if that is what you prefer.\n\nNow, let us install Sandpack\n```sh\nnpm install @codesandbox/sandpack-react\n```\n\nThat is it for dependencies, now let us move on to adding Sandpack to the application.\n\nGo ahead and delete `App.css`,  `App.test.js`, `setupTests.js`, and `logo.svg`. Also remove all the boilerplate code in `App.js`. It should look like this - \n```js\nfunction App() {\n  return <div></div>;\n}\n\nexport default App;\n```\n\nNow, let us import Sandpack in `App.js` - \n```js\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\nimport \"@codesandbox/sandpack-react/dist/index.css\";\n```\n\nHere, we are also importing a CSS file that contains the styles for the editor and preview.\n\nWe should also add the Sandpack component - \n```js\n<Sandpack />\n```\nThat is it!!! Now let us start the dev server by running `npm start`. Navigate to [http://localhost:3000/](http://localhost:3000/) and this is what you should see - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639209440921/6ANlUGyU7.png)\n\n### Custom Templates\n\nThe default template that Sandpack uses is vanilla js but we can also use other templates like react, vue, angular, etc. Let us see the react template in action. Just add the `template` attribute and specify the value as `react` - \n```js\n<Sandpack template=\"react\" />\n```\n\nFeel free to go through the [Sandpack Custom Content documentation](https://sandpack.codesandbox.io/docs/getting-started/custom-content) for more templates and information on how to add your custom code.\n\n### Custom Theme\n\nWe can also customize the theme. Let us look at adding a pre-built theme - \n```js\n<Sandpack template=\"react\" theme=\"sandpack-dark\" />\n```\n\nThis is how the editor should look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639210107545/AhqKN0slh.png)\n\nFeel free to go through the [Sandpack Custom UI documentation](https://sandpack.codesandbox.io/docs/getting-started/custom-ui) for more themes and information on building your theme.\n\nAt last, this is how our `App.js` looks like - \n```js\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\nimport \"@codesandbox/sandpack-react/dist/index.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Sandpack template=\"react\" theme=\"sandpack-dark\" />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nNow, that was just getting started with Sandpack but now let us look at it being used in a more real world example. Feel free to go through the [Sandpack documentation](https://sandpack.codesandbox.io/docs/) for more detailed guides and an API reference.\n\n## Using Sandpack with Next MDX Remote\n\n[Next MDX Remote](https://github.com/hashicorp/next-mdx-remote) is a library that parses MDX content (markdown but with support for JSX as well) and helps load them via `getStaticProps` or `getServersideProps` in NextJS. It is mainly used for documentation and blog posts. Today, we are going to be adding Next MDX Remote to a NextJS application and customize the code component by replacing it with Sandpack. First of all, let us make a new NextJS application and navigate into it - \n```sh\nnpx create-next-app sandpack-next-mdx-remote\ncd sandpack-next-mdx-remote\n```\n\nNow, let us delete `Home.module.css` under the `styles` directory and remove the boilerplate code in `index.js` under the `pages` directory. This is how it should look like - \n```js\nexport default function Home() {\n  return <div></div>;\n}\n```\n\n### Adding Next MDX Remote\nThe next step is to add and setup Next MDX Remote so let us do that - \n```sh\nnpm install next-mdx-remote\n```\n\nNow, let us go to `index.js` and add the following code - \n```js\nimport { serialize } from \"next-mdx-remote/serialize\";\nimport { MDXRemote } from \"next-mdx-remote\";\n\nexport default function Home({ source }) {\n  return (\n    <div>\n      <MDXRemote {...source} />\n    </div>\n  );\n}\n\nexport const getStaticProps = async () => {\n  const source = \"```html\\n<h1>Hello World</h1>\\n```\";\n\n  const mdxSource = await serialize(source);\n\n  return { props: { source: mdxSource } };\n};\n```\n\nNote that I am just writing down some basic markdown with a code block. Usually, this markdown is sourced from external files and paired with frontmatter but that is not something I am going to go over in this article.\n\nNow let us start the development server by running `npm run dev`. Upon navigating to [http://localhost:3000/](http://localhost:3000/), this is what our page should look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639212161614/eLQBXGSiy.png)\n\nNote that a simple HTML `code` element is being rendered now\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639212200694/GbuCJJR00.png)\n\nNow, I could add syntax highlighting to this using [remark prism](https://www.npmjs.com/package/remark-prism) but as we are anyways going to use Sandpack, let us move onto that instead.\n\n### Adding Sandpack to Next MDX Remote\n\nFirst of all, let us install the Sandpack package - \n```sh\nnpm install @codesandbox/sandpack-react\n```\n\nNow let us create a directory called `components` and add a file named `CustomMDXCode.js` in there. Add the following code to that file - \n```js\nimport { Sandpack } from \"@codesandbox/sandpack-react\";\nimport \"@codesandbox/sandpack-react/dist/index.css\";\n\nconst CustomMDXCode = props => {\n  return (\n    <Sandpack\n      template={props.template}\n      files={{ [`/${props.filename}`]: props.children }}\n    />\n  );\n};\n\nexport default CustomMDXCode;\n```\n\nHere, we are importing Sandpack, making a custom component, which is passed in some props. These props will contain the filename of the file, the template to use, and of course, the code. Note that we are adding a `/` to the beginning of the filename through string interpolation as it is required by Sandpack. \n\nNow, let us go back to our `index.js` file and make some changes to leverage the use of the new component - \n\n```js\nimport { serialize } from \"next-mdx-remote/serialize\";\nimport { MDXRemote } from \"next-mdx-remote\";\nimport CustomMDXCode from \"../components/CustomMDXCode\";\n\nexport default function Home({ source }) {\n  return (\n    <div>\n      <MDXRemote\n        components={{ code: props => <CustomMDXCode {...props} /> }}\n        {...source}\n      />\n    </div>\n  );\n}\n\nexport const getStaticProps = async () => {\n  const source =\n    \"```js template=react filename=App.js\\nexport default function App() {\\n  return <h1>Just some text...</h1>\\n}\\n```\";\n\n  const mdxSource = await serialize(source);\n\n  return { props: { source: mdxSource } };\n};\n```\n\nHere, we are adding a custom component for the code attribute (reference for all mdx components - [https://mdxjs.com/table-of-components/](https://mdxjs.com/table-of-components/)), which is nothing but the Sandpack component we created earlier. We have also changed the markdown source to `javascript`, added a `template` attribute and pointed that to `react`, added a `filename` attribute and named the file `App.js`, and wrote a simple function that displays some text for the code part.\n\nThis is how our page should look like now - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1639214269118/VUgIybb6A6.png)\n\n## Conclusion\nThat is it for this article. I hope you enjoyed it and learned how to add Sandpack to your react application. Feel free to comment on this post or reach out to me via [Twitter](https://twitter.com/AnishDe12020) in case you have any questions.\n\n## Links\nSandpack - [https://sandpack.codesandbox.io/](https://sandpack.codesandbox.io/)\n\nSanpack Documentation - [https://sandpack.codesandbox.io/docs/](https://sandpack.codesandbox.io/docs/)\n\nSandpack GitHub - [https://github.com/codesandbox/sandpack](https://github.com/codesandbox/sandpack)\n\nNext MDX Remote - [https://github.com/hashicorp/next-mdx-remote](https://github.com/hashicorp/next-mdx-remote)\n\nAll MDX Component - [https://mdxjs.com/table-of-components/](https://mdxjs.com/table-of-components/)","readingTime":{"text":"6 min read","minutes":5.975,"time":358500,"words":1195},"wordCount":1195},{"_id":"61ac8c76b6bca85a26d3dfa0","slug":"make-a-toast-with-html-css-and-js","title":"Make a toast with HTML, CSS, and JS","brief":"Introduction\nToasts are very useful for showing users some information. It has a wide variety of uses from displaying success messages for successful actions, showing error messages in case something goes wrong, and much more. Today we are going to b...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1638697970037/zAYKG5UvP.png","dateAdded":"2021-12-05T09:55:02.064Z","contentMarkdown":"## Introduction\nToasts are very useful for showing users some information. It has a wide variety of uses from displaying success messages for successful actions, showing error messages in case something goes wrong, and much more. Today we are going to build a simple toast with HTML and CSS. We are going to be using some javascript to add some interactivity.\n\n### What we are making - \nWe are going to be making a toast that shows up when a button is clicked. It can also be closed, which is hidden away, by clicking a close button.\n\n%[https://codepen.io/anishde12020/pen/JjrYMrW]\n\n## Basic CSS to make a toast\n\nTo make a toast animate in or out, we need to make the toast first. For this example, I am going to add a simple icon and some text in a box and that is going to be our toast.\n\nSo, in the markup, let us start by adding a `div` for out toast - \n```html\n<div class=\"toast\" id=\"toast\"></div>\n```\n\nNow, we need to add an icon. I am going to grab a simple information icon from [HeroIcons](https://heroicons.com/) and put in the SVG - \n```html\n<div class=\"toast\" id=\"toast\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" class=\"icon\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n</div>\n```\n\nLet us also add a text - \n\n```html\n<div class=\"toast\" id=\"toast\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" class=\"icon\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n  <p class=\"text\">Some Information</p>\n</div>\n```\n\nThis is what our page should look like - \n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1638691425468/rYVyqWbLO.png)\n\nThe icon is so big that is doesn't even fit in the view. Let us fix this design with some CSS and then style it.\n\nFirst, we are going to style the icon by defining a width and a height - \n\n```css\n.icon {\n  height: 2rem;\n  width: 2rem;\n}\n```\n\nLet us now make our toast a flexbox and add some margin on the icon. I am also going to position the toast on the top-right using an absolute position.\n\n```css\n.icon {\n  height: 2rem;\n  width: 2rem;\n  margin-right: 1rem;\n}\n\n.toast {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  right: 80px;\n}\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1638691746319/Xe8uqB4fX.png)\n\nEverything looks good except for the styling. Let us add some colors and other styles - \n\n```css\n.icon {\n  height: 2rem;\n  width: 2rem;\n  margin-right: 1rem;\n  color: white;\n}\n\n.text {\n  color: white;\n}\n\n.toast {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  right: 80px;\n  background-color: black;\n  border-radius: 12px;\n  padding: 0.5rem 1rem;\n  border: 5px solid #029c91;\n}\n```\nWe have changed the background color of the toast, added a border to it, added some border radius, and changed the colors of the icon and the text so that they are visible on the black background.\n\nThis is how our toast should now look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1638691938348/ZVHA6pQDM.png)\n\nLet us also add a button that will trigger the animation, that is, show the toast - \n```html\n<div class=\"toast\" id=\"toast\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" class=\"icon\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n  <p class=\"text\">Some Information</p>\n  \n</div>\n\n<button id=\"show-toast\" class=\"show-toast\">Show Toast</button>\n```\n\nLet us also style this button as it looks quite ugly now\n```css\n.show-toast {\n  background-color: black;\n  color: white;\n  border-radius: 8px;\n  padding: 8px;\n  cursor: pointer;\n}\n```\n\nLet us also disable any overflow - \n\n```css\nhtml,\nbody {\n  overflow: hidden;\n}\n```\n\nThis is how everything should look like now - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1638692227596/Bp9zQYJd3.png)\n\n## Adding animations\n\nNow that we have the toast and a button to trigger the animations, it is time to add the animations.\n\nFirst of all, we are going to give the toast a starting point by putting it outside the view. So let us edit the CSS for the toast - \n```css\n.toast {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  right: -500px;\n  background-color: black;\n  border-radius: 12px;\n  padding: 0.5rem 1rem;\n  border: 5px solid #029c91;\n  opacity: 0%;\n}\n```\n\nNow let us make a new class called `toast-active` that will get added to the toast whenever the button is clicked - \n\n```css\n.toast-active {\n  right: 80px;\n  opacity: 100%;\n}\n```\n\nNotice that we are also changing the opacity during the transition. This just makes it look a little better.\n\nNow let us write some javascript to add this class to the toast whenever the button is clicked - \n\n```js\nlet toast = document.getElementById(\"toast\");\ndocument.getElementById(\"show-toast\").addEventListener(\"click\", function () {\n  toast.classList.add(\"toast-active\")\n});\n```\n\nHere, whenever the button is clicked, the `toast-active` class is being added to the toast. Right now the animation is instant, which doesn't look good. Let us add a transition - \n\n```css\n.toast {\n  display: flex;\n  align-items: center;\n  position: absolute;\n  top: 50px;\n  right: -500px;\n  background-color: black;\n  border-radius: 12px;\n  padding: 0.5rem 1rem;\n  border: 5px solid #029c91;\n  opacity: 0%;\n  transition: all 0.25s ease-out;\n}\n```\n\nHere the transition goes on for a quarter of a second and we have also eased it out so it isn't harsh.\n\n## Adding a close button to the toast\nWe would like to give the user a close button that they can click to close the toast.\n\nFirst of all, we need to add a button the the toast in our markup -\n```html\n<div class=\"toast\" id=\"toast\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" class=\"icon\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n  </svg>\n  <p class=\"text\">Some Information</p>\n  <button id=\"close-button\" class=\"close-button\">\n    &#10005;\n  </button>\n</div>\n\n<button id=\"show-toast\" class=\"show-toast\">Show Toast</button>\n```\nLet us also style it so that it is visible - \n```css\n.close-button {\n  background-color: black;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n```\n\nNow, when this button will be clicked, it will just do the reverse of what the show toast button did, that is, remove the `toast-active` class - \n\n```js\ndocument.getElementById(\"close-button\").addEventListener(\"click\", function () {\n  toast.classList.remove(\"toast-active\");\n})\n```\n\nNow, clicking the cross symbol (close button) in the toast should take it away from the screen with a transition.\n\n## Conclusion\n\nIf everything has worked out well so far, give yourself a pat on the back because you have just built a toast with nothing but HTML, CSS, and JS!!! \n\nIf you had any issues, feel free to comment down below or reach out to me via [Twitter](https://twitter.com/AnishDe12020).\n\n## Links\n\nCodepen for this project - https://codepen.io/anishde12020/pen/JjrYMrW\n\nHeroIcons - https://heroicons.com/\n\nMy Twitter - https://twitter.com/AnishDe12020","readingTime":{"text":"6 min read","minutes":5.355,"time":321300,"words":1071},"wordCount":1071},{"_id":"619b58f95bb9cc256fc6bf46","slug":"how-to-write-good-commit-messages-with-commitlint","title":"How to Write Good Commit Messages with Commitlint","brief":"This article was first published on Freecodecamp on the 13th of November, 2021 - https://www.freecodecamp.org/news/how-to-use-commitlint-to-write-good-commit-messages/\n\nWe are often in a hurry to commit our changes in Git and so we write something ra...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1637567563481/O4DnwuzYH.png","dateAdded":"2021-11-22T08:39:32.000Z","contentMarkdown":"> This article was first published on Freecodecamp on the 13th of November, 2021 - https://www.freecodecamp.org/news/how-to-use-commitlint-to-write-good-commit-messages/\n\nWe are often in a hurry to commit our changes in Git and so we write something random in our commit messages. In fact, I have seen people putting the date and time or even something like `commit 1`, `commit 2` in their messages.\n\nThis is not a good practice, as commit messages should be helpful and make sense so that the people working on the project, reading the code, or contributing to it understand the changes from the message itself.\n\nNow let's look at a simple way to solve this issue.\n\n# What is Commitlint?\n[Commitlint](https://commitlint.js.org/#/) is a simple tool that lints your commit messages and makes sure they follow a set of rules.\n\nIt runs as a husky pre-commit hook, that is, it runs before the code is committed and blocks the commit in case it fails the lint checks.\n\n# How to Use Commitlint with a Simple JavaScript Project\nIn this example, we are going to see how we can set up commitlint in a simple JavaScript project. To get started, let's create an empty project first:\n```\nmkdir commitlint_example && cd commitlint_example\n\nnpm init\n# OR\nyarn init\n# Just accept the defaults when prompted to configure the project\n```\n\nNow, let's initialise an empty Git repository:\n```\ngit init\n```\n\nWe must also add a `.gitignore` file to prevent some files from being committed:\n```\nnode_modules/\n```\nNow we'll add a file called `index.js` and just log out something for now:\n```\nconsole.log(\"Hello, World!!!\")\n```\n\nRunning `node .` should print out the text on your terminal like this:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637567812155/mXZW8Jtc-.png)\n\nRunning `node .` prints out Hello, World!!!\n# How to Set Up commitlint\nWe're going to set up commitlint following the [official local setup docs here](https://commitlint.js.org/#/guides-local-setup).\n\nFirstly, we need to install the commitlint CLI and add a commitlint config (in this case the default [Conventional Commits Config](https://www.conventionalcommits.org/en/v1.0.0/)).\n```\nnpm install @commitlint/cli @commitlint/config-conventional --save-dev\n# OR\nyarn add -D @commitlint/cli @commitlint/config-conventional\n```\n\nWe need to add some configuration to a file named `commitlint.config.js` like this:\n```js\nmodule.exports = {\n    extends: [\n        \"@commitlint/config-conventional\"\n    ],\n}\n```\n\nNow we need to install husky to run commitlint as a pre-commit hook.\n```\nnpm install husky --save-dev\n# OR\nyarn add -D husky\n```\n\nWe also need to enable the [husky](https://typicode.github.io/husky/#/) hooks:\n```\nnpx husky install\n# OR\nyarn husky install\n```\n\nWe can add a prepare step which enables the husky hooks upon installation:\n```\nnpm set-script prepare \"husky install\"\n```\n\nNow that we are done installing husky, we need to add a pre-commit hook to run commitlint before the code is committed.\n```\nnpx husky add .husky/commit-msg \"npx --no -- commitlint --edit $1\"\n# OR\nyarn husky add .husky/commit-msg \"yarn commitlint --edit $1\"\n```\n\nNow we're done setting up commitlint. So let's test to see if it works.\n\nFirst, we'll stage all files to commit them:\n```\ngit add -A\n```\n\nNow, let's try to commit the changes, without following the default convention:\n```\ngit commit -m \"set up a basic js project, added commitlint and husky for liniting commit messages\"\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637568416654/qKDqMBQC8.png)\nYou should get the above output (or something similar) which errors out. If the commit is successful, you have likely gone wrong somewhere. Make sure that you have run all the commands above and try undoing the commit, running the scripts, and committing again until it fails.\n\nNow it is time to commit properly. Run this command:\n```\ngit commit -m \"ci: initialised basic js project, added commitlint and husky to lint commit messages\"\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637568454821/TMptoU09l.png)\nAnd now it all looks good.\n\n# How the Default commitlint Convention Works\nThe default commitlint convention uses the [Conventional Commits Convention](https://www.conventionalcommits.org/en/v1.0.0/) where there is a type, optionally a scope, a subject, and optionally a body and footer.\n\nFor example I can fix a bug related to UI and then the commit message can be `fix(ui): Button was not showing up properly on mobile view.` Here the type is `fix`, that is, a fix for a bug, the scope is `ui` as the fix was related to the ui, and the subject provides more context about the issue.\n\nNote that I can supply multiple scopes, for example, `feat(ui,lang): added an option to save the image as svg and added language support for Spanish.` Here we introduce 2 features ‚Äì a new button to save an image as svg and language support for Spanish. This means that there are 2 scopes. The scopes can be separated by the 3 delimiters - `,`, `/` and `\\`.\n\nJust a quick note here: you should usually keep commits small and specific, and while there might be some edge cases, this is not one. We're just using it for example purposes.\n\nBreaking changes are usually represented with an exclamation `!` mark but you can also write them in bold in the footer of the commit message. Doing both is the best practice where the footer gives more information. Here's an example:\n```\nrefactor(runtime)!: Dropped support for NodeJS v12\n\nBREAKING CHANGE: Support for NodeJS v12 has been dropped due to the latest refactor, please upgrade to the latest LTS version of NodeJS\n```\n\nThis brings us to multi-line commit messages. Sometimes we need to give more context on something. In this case, it best to include the info in the commit message to make it clear to anyone trying to understand what all has changed and why it has changed in a commit. Here's an example:\n```\ndocs: Added an aria-label in the IconButton example\naria-label is a required prop by the IconButton component. If it is not present, the build will fail\n```\n\n- Advantages of using commitlint\nAutomatic changelogs ‚Äì Due to commits following a standard convention, tools like [standard-version](https://github.com/conventional-changelog/standard-version) can automatically generate changelogs\n- Better understanding of commits ‚Äì A commit with a specific type and scope will help you understand what code the commit changes\n- Adherence to a particular convention ‚Äì When you have a big project and a lot of people committing to it, people might forget to use the convention. commitlint blocks such commits so that the commits adhere to the defined convention.\nNow you know the basics of commitlint. And in the next part of this article, we are going to dive a little deeper and see how to write custom commitlint rules and how to run a  commitlint CI in GitHub Actions.\n\n# How to Create Custom commitlint Rules\nThe [Conventional Commits Convention](https://www.conventionalcommits.org/en/v1.0.0/) works for most projects. But sometimes you might want to add some more rules specific to your use case.\n\n> For a complete reference, please [look at the official documentation here](https://commitlint.js.org/#/reference-rules).\n\nFor our example here, we'll use an application which has a library of buttons made with TailwindCSS. You can add your creation to this application through a pull request.\n\nNow these commits can have different types, so let's take a `button` for this example. This would require me to override the `type-enum` rule in the conventional commits convention.\n\nTo do this, I will create a `rules` object in my commitlint config and add `button` as a type. This is how our `commitlint.config.js` should look:\n```js\nmodule.exports = {\n    extends: [\n        \"@commitlint/config-conventional\"\n    ],\n    rules: {\n        \"type-enum\": [2, \"always\", [\"build\", \"chore\", \"ci\", \"docs\", \"feat\", \"fix\", \"perf\", \"refactor\", \"revert\", \"style\", \"test\", \"button\"]],\n    }\n}\n```\nHere I have just added the button type on top of the default types. Now let's commit this:\n```\ngit add -A\ngit commit -m \"ci(commitlint): added button as a type of commit\"\n```\nNow we'll test our button type. For this example, I am just going to add a new line to our index.js file. This is how it should look:\n```js\nconsole.log(\"Hello, World!!!\")\nconsole.log(\"New Button\")\n```\nNow, let's commit it:\n```\ngit add -A\ngit commit -m \"button: added a new console.log to qualify as a button\"\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637569506925/D_-UuHYusQ.png)\nYou should get the above output.\n\n# How to Use Commitlint with GitHub Actions\nCommit messages are linted locally, but sadly such checks can be skipped locally. So we can add a step in our CI/CD workflow to double-check.\n\nIn this example, we are going to be using [GitHub Actions](https://github.com/features/actions) but there are [official guides](https://commitlint.js.org/#/guides-ci-setup) for Travis CI, Circle CI, and GitLab CI as well.\n\n## How to Push our Code to GitHub\nFirstly, we need to push our code to GitHub to use GitHub Actions. So let's do that real quick.\n\nI am going to be using the [GitHub CLI](https://github.com/cli/cli) for this but you can do it via the GUI ‚Äì just don't forget to add the upstream to the repository.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637569760265/0PN6WWM3o.png)\n\nWe can push the code using `git push origin master`.\n\n# How to Set Up the Workflow\nWe are going to be using a pre-built GitHub Action for this example, which you can find here: [https://github.com/wagoid/commitlint-github-action](https://github.com/wagoid/commitlint-github-action).\n\nWe need to make a new folder called `.github` and then a new folder in it called `workflows`. Then we can add a file called `commitlint.yml` and add the workflow configuration.\n\n`.github/workflows/commitlint.yml`\n```yaml\nname: Lint Commit Messages\non: [pull_request, push]\n\njobs:\n  commitlint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - uses: wagoid/commitlint-github-action@v4\n```\nThis workflow will run every time code is pushed to GitHub and every time a pull request is opened. To test it, let's commit and push our code.\n```\ngit add -A\ngit commit -m \"ci(commitlint,workflow): added GitHub action workflow to run commitlint on push and pr\"\ngit push origin master\n```\nNow, we can go to the GitHub repository and then the actions tab and we can see the workflow.\n\n> I made a typo in the name of the workflows folder so I had to fix that and commit and push again so the commit name is different.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637569850084/yiiRhd9n0.png)\nWhen you look at the details, you can see that the workflow has been successful as all the commits until now have adhered to the convention.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637569859337/svUf979R1.png)\n\nWe can also inspect the logs:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637569866028/l1c3xkuWZ.png)\n\nWhat's next?\nI hope everything has worked well for you so far. If you had any issues, feel free to reach out to me on [Twitter](https://twitter.com/AnishDe12020) and I will be happy to help üòÉ.\n\nNow that you have commitlint set up, it's a good idea to add automated changelogs. So head over to the [standard version](https://github.com/conventional-changelog/standard-version) repository and try to implement it on your own!\n\nHelpful Links\n- Demo Repository - https://github.com/AnishDe12020/commitlint-example\n- Commitlint website and docs - https://commitlint.js.org/#/\n- Commitlint GitHub action - https://github.com/wagoid/commitlint-github-action\n- Standard Version GitHub Repository - https://github.com/conventional-changelog/standard-version\n- Husky website and docs - https://typicode.github.io/husky/#/\n- Conventional Commits - https://www.conventionalcommits.org","readingTime":{"text":"9 min read","minutes":8.895,"time":533700,"words":1779},"wordCount":1779},{"_id":"61792a50913b6d3f08e160c8","slug":"middleware-in-nextjs-12-what-are-they-and-how-to-get-started-with-them","title":"Middleware in NextJS 12 - What are they and how to get started with them","brief":"Yesterday, we had the NextJS Conf and we got a lot of new things. NextJS 12 has been released and it has got a ton of new and exciting features. One of these features is middleware in NextJS so let us see how it works with an example.\nWhat is NextJS ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1635330583778/5PWAHkJYC.png","dateAdded":"2021-10-27T10:30:40.760Z","contentMarkdown":"Yesterday, we had the [NextJS Conf](https://nextjs.org/conf) and we got a lot of new things. [NextJS 12](https://nextjs.org/blog/next-12) has been released and it has got a ton of new and exciting features. One of these features is [middleware in NextJS](https://nextjs.org/docs/middleware) so let us see how it works with an example.\n\n# What is NextJS Middleware?\nMiddleware are simple pieces of code that allows one to modify the response to a request even before it is completed. We can rewrite, redirect, add headers or even stream HTML based on the user's request.\n\n> This definition is from the [NextJS Middleware Docs](https://nextjs.org/docs/middleware)\n\n# Getting Started with NextJS 12\nI am going to do everything in [Replit](https://replit.com/) for this example. You can also follow along with me on this tutorial. \n\nThe Repl - https://replit.com/@AnishDe12020/NextJS-12-Middleware\n\nCreating a NextJS project with `create-next-app` will give us a project with NextJS 11 set up (as of 27th October 2021) so, firstly, we need to upgrade to NextJS 12. \n\nWith NPM - \n```\nnpm install next@latest\n```\nWith Yarn - \n\n```\nyarn add next@latest\n```\n\n## A simple middleware\n\nNow, to add middleware, we need to make a `_middleware.js` file in our pages directory. Note that you can also add middleware files in sub-directories in the pages directory to make it run after the top-level middleware file. You can refer to the [NextJS Middleware Execution Order Documentation](https://nextjs.org/docs/middleware#execution-order) for more information.\n\nNow let us write a simple middleware function - \n```js\nconst middleware = (req, ev) => {\n  return new Response(req.ua.os.name);\n};\n\nexport default middleware;\n```\n\nThis will show the operating system of the user on the page. We were streaming HTML to the user but now let us see how we can rewrite routes under the hood.\n\n## A middleware that rewrites the route under the hood\n\nFirst, we will create a new file called `[os].js` and copy in the `index.js` code into there, just replacing the function name.\n\n`[os].js` - \n```js\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport styles from '../styles/Home.module.css'\n\nexport default function Home() {\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Create Next App</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>\n          Welcome to <a href=\"https://nextjs.org\">Next.js!</a>\n        </h1>\n      </main>\n\n      <footer className={styles.footer}>\n        <a\n          href=\"https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Powered by Vercel\n            and Replit\n        </a>\n      </footer>\n    </div>\n  )\n}\n```\n\nNow let us go back to our `_middleware.js` file and make some changes. First we will import `NextResponse`\n```js\nimport {NextResponse} from \"next/server\"\n```\nNow, let us store the user's operating system in a variable\n```js\nconst os = req.ua.os.name\n```\nNow, we can rewrite the URL to the new route we created and that is where `NextResponse` comes in.\n```js\nreturn NextResponse.rewrite(`/${os}`) // This return is necessary\n```\n\nThis is how out `_middleware.js` files should look now - \n```js\nimport {NextResponse} from \"next/server\"\n\nconst middleware =  (req, ev) => {\n  const os = req.ua.os.name\n\n  return NextResponse.rewrite(`/${os}`)\n};\n\nexport default middleware;\n```\n\nNow let us import Next Router in our new route\n```js\nimport {useRouter} from \"next/router\"\n```\nAs this is a react hook, we need to create a new instance of the NextJS router inside of the function being returned.\n```js\nconst router = useRouter()\n```\nWe can get the operating system of the user from the URL parameter we rewrote earlier in the middleware\n```js\nconst os = router.query.os\n```\nAt last, let us show the user what operating system they are using\n```js\n<h1 className={styles.title}>\n      You are using the {os} operating system\n</h1>\n```\n\nAt last this is how are `[os].js` should look like - \n```js\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport styles from '../styles/Home.module.css'\nimport {useRouter} from \"next/router\"\n\nexport default function Os() {\n  const router = useRouter()\n\n  const os = router.query.os\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Create Next App</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h1 className={styles.title}>\n          You are using the {os} operating system\n        </h1>\n      </main>\n\n      <footer className={styles.footer}>\n        <a\n          href=\"https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Powered by Vercel\n            and Replit\n        </a>\n      </footer>\n    </div>\n  )\n}\n```\n\nNow if we visit the home page, we should see this (note that I had removed some of the nextjs boilerplate code) - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635324809605/25K4R9PgA.png)\n\nI can emulate the browser user agent using the browser dev tools and we get a different result for the operating system - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635324951169/fAgS6se9n.png)\n\nNow, note that the URL is `https://nextjs-12-middleware.anishde12020.repl.co/` and not  `https://nextjs-12-middleware.anishde12020.repl.co/Linux` or `https://nextjs-12-middleware.anishde12020.repl.co/Mac Os`. This is because, we are re-writing the request in the middleware and hence there is no change on the client side.\n\n## How does NextJS middleware work under the hood?\nNextJS middleware make use of [Vercel's Edge Functions](https://vercel.com/features/edge-functions) which run on the [V8 Engine](https://v8.dev/). The V8 Engine is a javascript engine written in C++ and is maintained by Google. It is considerably faster than running NodeJS on a virtual machine or a container and Vercel claims these edge functions to be instantaneous.\n\n### Limitations of edge functions\nSome NodeJS APIs are not available with middleware (as they are edge functions) such as the filesystem API. Also, some NodeJS modules won't work as only modules which have implemented ES Modules and do not use any native NodeJS APIs are allowed. For more information, see [here](https://nextjs.org/docs/api-reference/edge-runtime)\n\n# Wrapping Up\nSo far, we have seen the power of middleware and how this is going to be a huge feature for developers. Things like serving localized sites, providing region-based discounts, authentication, bot detection and much more can be done quickly and easily by using middleware.\n\nThe team at Vercel has also put together many examples using middleware. Check them out [here](https://vercel.com/features/edge-functions#examples)\n\nThat is it for this post, feel free to leave down a comment below and you can also reach out to me on [Twitter](https://twitter.com/AnishDe12020)\n\n\n","readingTime":{"text":"5 min read","minutes":4.81,"time":288600,"words":962},"wordCount":963},{"_id":"617155830f452c1cd94f662f","slug":"my-journey-in-hacktoberfest-2021-and-why-you-should-also-participate","title":"My Journey in Hacktoberfest 2021 and Why You Should also Participate","brief":"What is Hacktoberfest?\nHacktoberfest is held in the month of October every year. It is all about getting people to make quality contributions to open-source projects. Those who make 4 pull requests which are valid and get merged, get some swag (t-shi...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1634817393976/JUWpc990G.png","dateAdded":"2021-10-21T11:56:51.208Z","contentMarkdown":"## What is Hacktoberfest?\n[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is held in the month of October every year. It is all about getting people to make **quality contributions** to open-source projects. Those who make 4 pull requests which are valid and get merged, get some swag (t-shirt, stickers). \n\n# My Journey\nI was pretty excited about Hactoberfest this year as this was my first year participating in it. Hacktoberfest 2021 would give me an opportunity to make many quality pull requests. Now, this doesn't mean that you should only contribute during Hacktoberfest, you should contribute whenever you get the opportunity to do so.\n\n## Notable Contributions\n\n![here-our-contribution.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1634812251871/IC_itjN6z.gif)\n\n### Migrate to Firebase v9 JS SDK\n\nI started off by working on [an issue labeled `hacktoberfest`](https://github.com/avneesh0612/voyagger/issues/12) (these are the kind of issues you should look for). I had never used the Firebase v9 JS SDK before but this was a great opportunity for me to experience the new modular nature of the SDK. I learned a lot from working on this issue. After I was done with migrating and testing everything, I opened [a pull request](https://github.com/avneesh0612/voyagger/pull/15) and after some time it got merged, and once again, I felt happy. You can read about the joy of contributing to open-source [here](https://blog.anishde.dev/the-joy-of-contributing-to-open-source). \n\n### Changed styles to incorporate Hacktoberfest 2021 colors\n@[Usman Sabuwala](@usmanwrites) made [an amazing project](https://github.com/max-programming/hacktoberfest-projects) which allowed anyone to look for Hacktoberfest projects to contribute to. One problem was that the color scheme used in the website resembled the Hacktoberfest 2020 color scheme. I decided to change the color scheme and make some changes and then submitted [a pull request](https://github.com/max-programming/hacktoberfest-projects). I learned a lot about [DaisyUI](https://daisyui.com/) (a tailwind CSS plugin) and how to style a website's scrollbar.\n\n# Why you should participate in Hacktoberfest\nParticipating in Hacktoberfest is not about getting the swag but it is about making quality contributions and learning from it. You will get a chance to learn a lot from working on issues. During Hacktoberfest, many communities arrange events where they talk about contributing to open-source and how one can get started. In simple words, participate in Hacktoberfest to get familiar with open-source and then contribute to open-source whenever you get an opportunity to do so.\n\nHacktoberfest 2021 is still not over, you have got time till October 31st and if you cannot complete 4 quality pull requests by that time, don't worry, just making quality contributions means a lot and gets you started with contributing to open-source. \n\nYou can check out my article about how open-source is of great importance in everyday life and why we should contribute to open-source in one of my [past articles](https://blog.anishde.dev/open-source-in-everyday-life). I have also talked about the joy of contributing to open-source in my [last article](https://blog.anishde.dev/the-joy-of-contributing-to-open-source).\n\nThat is it for this post, feel free to comment down below with your thoughts and achievements in the open-source community and you can also reach out to me on [Twitter](https://twitter.com/anishde12020). See you in the next one!!! \n","readingTime":{"text":"3 min read","minutes":2.43,"time":145800,"words":486},"wordCount":487},{"_id":"6168440618374f25732792b4","slug":"the-joy-of-contributing-to-open-source","title":"The Joy of Contributing to Open Source","brief":"Back in July of this year, I made a bold decision of completely switching to Pop OS (an ubuntu-based Linux distribution) and I was faced with many hurdles. One of these was an alternative to Microsoft's Your Phone application. \nAfter some research, I...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1634223048452/2ejp46rbT.png","dateAdded":"2021-10-14T14:51:50.966Z","contentMarkdown":"Back in July of this year, I made a bold decision of completely switching to Pop OS (an ubuntu-based Linux distribution) and I was faced with many hurdles. One of these was an alternative to [Microsoft's Your Phone application](https://www.microsoft.com/en-us/p/your-phone/9nmpj99vjbwv?activetab=pivot:overviewtab). \n\nAfter some research, I stumbled over an application called [KDE Connect](https://kdeconnect.kde.org/) which turned out to be a great alternative as it not only did everything that Microsoft's Your Phone application did but had some more nifty features.\n\n# My first pull request\nAs Pop OS uses Cosmic (a fork of the popular GNOME desktop environment), I was better off using [GSConnect](https://extensions.gnome.org/extension/1319/gsconnect/) instead of the native KDE Connect application. GSConnect is a fork of KDE Connect which integrates well with GNOME. Everything was good until I discovered a feature that allowed me to share the URL of my current tab to my phone. This needed me to download the [GSConnect chrome extension](https://chrome.google.com/webstore/detail/gsconnect/jfnifeihccihocjbfcfhicmmgpjicaec) but I use Microsoft Edge as my primary web browser. Now, chrome extensions work on Microsoft Edge as it is chromium-based but the GSConnect chrome extension made use of a feature called [native messaging](https://developer.chrome.com/docs/apps/nativeMessaging/) which helped the browser extension and a program installed on the computer interact with each other. Sadly, this needs dedicated configuration for each browser (it is just a line of code). GSConnect didn't have support for Microsoft Edge at that time and hence I decided to [open an issue](https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues/1139).\n\nA collaborator got back to me and explained the issue to me. I was a bit stuck and so asked for more help on GitHub and the same person got back to me, giving me a place to start working on the issue. I quickly figured out the problem and fixed the issue on my end. The next step was to open a pull request so I cloned the repository, made the changes, pushed the code, and opened [my first ever pull request](https://github.com/GSConnect/gnome-shell-extension-gsconnect/pull/1141). I did mess up with the code style because I had forgotten to read the contributing guide and hence didn't run the linter checks. Anyways, a member got back to me and I fixed the problem and then my pull request was merged üéâ.\n\n## The joy when my pull request got merged\nAs soon as I saw the notification that my pull request had been merged, I felt the joy of contributing to an application used by many people. This is the moment you realize that you are not working for nothing, you are getting happiness from helping others and you are learning a lot yourself. Contributing to open-source also adds to your portfolio, it shows that you care about the project.\n\n## The learning\nWhen I opened the issue, I didn't know anything about native messaging in chrome extensions but from discovering this bug to fixing it, I learned a lot about how native messaging works and how open-source contributions work.\n\nI have talked about the perks of contributing to open-source in [my last article](https://blog.anishde.dev/open-source-in-everyday-life).\n\n# Getting Started with contributing to open-source\nIt is not hard to experience the joy of contributing to open-source. Look for issues that you might want to work on and if you find one which you want to work on, it is as simple as making the changes and opening a pull request (make sure to follow the repository's contributing guide if it has one). Also, check out [Hacktoberfest](https://hacktoberfest.digitalocean.com/) where you open 4 **valid** pull requests on participating repositories and if you are the first 50k to do so, you get some swag. Do check out [this guide on getting started with Hacktoberfest](https://ayushirawat.com/beginners-guide-to-hacktoberfest-2021) by @[Ayushi Rawat](@ayushi7rawat) if you feel stuck.\n\nFeel free to comment down if you feel like I missed something or you got a question. You can also reach out to me on [Twitter](https://twitter.com/AnishDe12020).\n\nHappy contributing :D\n\n","readingTime":{"text":"4 min read","minutes":3.16,"time":189600,"words":632},"wordCount":633},{"_id":"615ec3dab945c81a907ce2c4","slug":"open-source-in-everyday-life","title":"Open Source in Everyday Life","brief":"We often don't realize but open-source projects play a huge role in our life. Today, in this article, I am going to talk about how we use open-source technologies in our everyday life and what would happen if they didn't exist üò±.\n\nSome Examples\nLet ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1633600326583/ghPVqeQKg.png","dateAdded":"2021-10-07T09:54:34.649Z","contentMarkdown":"We often don't realize but open-source projects play a huge role in our life. Today, in this article, I am going to talk about how we use open-source technologies in our everyday life and what would happen if they didn't exist üò±.\n\n![let-us-get-started-minions.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1633524503879/t56B1bvDk.gif)\n\n## Some Examples\nLet us start with some open-source technologies we use in our daily life - \n### Android\nMany of us have phones running the [Android Operating System](https://www.android.com/). Android by itself is an open-source project maintained by Google. The base version of android is popularly referred to as Android Open Source Project (AOSP). Now, what do I mean by the base version of android? Well most of us aren't running pure AOSP on our phones as companies put on their proprietary code on top of AOSP. In fact [Google Play Services](https://developers.google.com/android/guides/overview) is closed-source. You can use AOSP without Google Play Services but then you are going to miss out on Google Services and will face weird issues if you do so. Many third-party apps will also have trouble working as many of them rely on Google APIs like the Google Maps API.\n### Chromium\nMost people use some chromium-based browser, be it Google Chrome, Microsoft Edge, Vivaldi, Brave, or even Opera. Chromium by itself is an [open-source project](https://www.chromium.org/Home). Now, to be fair, none of the aforementioned browsers are open-source (with the exception of Brave). This is usually done to pack more proprietary features. For example, Google Chrome comes with a suite of Google features like syncing across different devices. These browsers are a chromium fork with more features, different themes, better integration with operating systems, and more optimization. It is a lot like how Android works.\n### Visual Studio Code\n[Visual Studio Code](https://code.visualstudio.com/) is an extremely popular code editor and it is open source. You can take a look at the [source code on GitHub](https://github.com/microsoft/vscode). There is a small caveat, the version of Visual Studio Code distributed by Microsoft does have telemetry which the open-source version doesn't. You can download [VSCodium](https://vscodium.com/) which has binaries built from the source code on GitHub but you might face issues. \n\nMost applications depend on some open-source project, be it a web framework like [React](https://reactjs.org/) or some other package. In fact, all programming languages are open-source (at least I have never heard of a closed-source programming language). \n\n## Advantages of Open Source\n\n### Great Community\nYou will have a great community built around your project that will trust your project. Many people are open-source enthusiasts and will try their best to use open-source software. These people will be your users if the application fulfills their needs!!!\n\n### Contributors\nWhen an application is open-source, open-source contributors get a chance to contribute to your project. Any contribution is extremely valuable as it usually fixes a problem. There will be spam but that is just part of the game.\n\n### Learning\nContributing to open-source is something that gives not only beginners but also advanced developers something to work on and learn from contributing. You, as the developer of the project, will also learn a lot from the community of developers who find something not right with your project.\n\n### Fixes\nWe all make mistakes and there will be loopholes or bugs in your code. Other contributors will not only let you know about the issue but also help you in fixing the problem or even fix the problem themselves. \n\n### Better Understanding\nIf one encounters a problem in an open-source project, one can look at the source code and better understand the cause of the problem. This will help resolve the bug more quickly making it a win-win situation for you, as the developer and the user.\n\n### Portfolio\nContributing to open-source is something of great importance in your portfolio. It is a great starting point that will help you later on.\n\n## What would happen if open-source didn't exist\nNow that we have seen examples of open-source in our day-to-day life and have seen the advantages, let us discuss what would happen if everything would be proprietary.\n\n### It wouldn't be good for developers\nDevelopers usually rely on programming languages, libraries, and frameworks when developing an application. If these were not open-source, developers would fear that they might be shipping applications with trackers which they didn't intend to add. This would also mean that there would be lesser flexibility. When something is open-source, there is a great community making tutorials, understanding how a framework works, working on making it better, and making plugins for it. \n\n### Wouldn't be good for beginners\nBeginners learn a lot from contributing to open-source. If this opportunity was to be taken away from their learning path, they would lose a lot. From my personal experience, I can say that I have learned a lot by contributing to others' projects on GitHub. Even seeing and understanding the source code of an application and how it works teaches one a lot.\n\n### Tinkerers wouldn't be happy\nMany people don't want a company to decide what is best for them. They want to customize their things as much as they can to fit their needs and likings. This makes one more comfortable and gives people options.\n\n### Cost\nAs things would become closed-source, corporations would try to make the most out of it by pricing their products high. Due to many things being open-source, the community has developed many open-source alternatives which may better suit a person. Not only are open-source projects usually free or cheap but also they are better when it comes to privacy. \n\n### Privacy\nThis takes us to privacy. Closed-source applications are known to have trackers which is a direct invasion of privacy. Open-source applications usually don't have such trackers. If someone is concerned about their privacy, they can even self-host an application they want to use.\n\nOther than these, closed-source applications would take away the advantages open-source applications tend to have (as mentioned above).\n\n## Conclusion\nI hope you have found this article helpful in understanding the importance of open-source in our everyday life. Feel free to leave a comment down below if you have a doubt and you can reach out to me on [Twitter](https://twitter.com/anishde12020) as well. I am also going to write a lot about open-source this month so keep an eye on my blog or follow me so you are notified whenever I release a new post.\n\n\n![bye-close-door-mionion.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1633593281303/Bjk6EPRvy.gif)\n","readingTime":{"text":"6 min read","minutes":5.325,"time":319500,"words":1065},"wordCount":1066},{"_id":"6156bea528ed304eb1d80bed","slug":"creating-a-bug-report-form-in-github","title":"Creating a Bug Report Form in GitHub","brief":"GitHub allowed us to make pre-build issue templates in the form of markdown files which the person reporting the bug could fill out. This was better than presenting the person reporting the bug with a blank textbox but it could get a bit clumsy at ti...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1633074780447/HqDVBypPE.png","dateAdded":"2021-10-01T07:54:13.400Z","contentMarkdown":"[GitHub](https://github.com/) allowed us to make pre-build issue templates in the form of markdown files which the person reporting the bug could fill out. This was better than presenting the person reporting the bug with a blank textbox but it could get a bit clumsy at times and many wouldn't follow the format. GitHub now has got an option to build a form that one can fill out as a bug report. Note that Issue forms are in beta currently.\n\n# Getting Started\nGitHub Issue forms are currently only available for public repositories so we need a public repository to work with.\n\nNext, we need to create a folder called `.github/ISSUE_TEMPLATE` and then add a `yml` file. Let us call this `bug_report.yml`.\nOur path will be `.github/ISSUE_TEMPLATE/bug_report.yml`.\n\n# Filling out the template `yml` file\nWe are going to make a simple form to file a bug report so let's get started\n\nFirst, let us add a name:\n```yml\nname: üêõBug Report\n```\n\nWe will also add a description, title, and some labels\n```yml\ndescription: File a bug report here\ntitle: \"[BUG]: \"\nlabels: [\"bug\"]\n```\n\nWe can also add an assignee (this is optional) - \n```yml\nassignees: [\"AnishDe12020\"]\n```\n\nNow that we are done with metadata, let us start with the body of the issue - \n\nLet us start with adding a small text - \n```yml\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report!!!\n```\n\nWe don't want the user to file a bug report if a report for that bug already exists so let us add a checkbox\n\n```yml\n - type: checkboxes\n    id: new-bug\n    attributes:\n      label: Is there an existing issue for this?\n      description: Please search to see if an issue already exists for the bug you encountered.\n      options:\n      - label: I have searched the existing issues\n        required: true\n```\n\nHere we have specified the `type` as a checkbox and added the `label` parameter and `description` attributes. We have then added a `label` parameter to the checkbox and made it a required field as we always want it to be checked by the user.\n\nNow let us ask the user for a description of the bug - \n```yml\n  - type: textarea\n    id: bug-description\n    attributes:\n      label: Description of the bug\n      description: Tell us what bug you encountered and what should have happened\n    validations:\n      required: true\n```\nNotice how we add an `id` to the field (this is optional) and we have also added a `description` attribute. We can also add a `placeholder` attribute but let us leave that for this one. We have also made the field required by setting the `required` parameter to `true` in the `validations` section. The `label` attribute is the only required parameter.\n\nWe can also ask them to tell is the steps to reproduce the bug\n```yml\n  - type: textarea\n    id: steps-to-reproduce\n    attributes:\n      label: Steps To Reproduce\n      description: Steps to reproduce the behavior.\n      placeholder: Please write the steps in a list form\n    validations:\n      required: true\n```\nThis is similar to the `bug-report` field but we have added a `placeholder` this time.\n\nNow let us see how we can add a dropdown. Say we got 5 versions of our apps and want the users to tell us in which version of the app the issue is occurring. We will also give them the option to choose multiple versions in case the issue is occurring on more than 1 version\n```yml\n  - type: dropdown\n    id: versions\n    attributes:\n      label: Which version of the app are you using?\n      description: If this issue is occurring on more than 1 version of the app, select the appropriate versions.\n      multiple: true\n      options:\n       - 1.0.0\n       - 1.1.0\n       - 1.2.0\n       - 2.0.0\n       - 2.1.0\n    validations:\n      required: true\n```\n\nAt last, this is how our `bug_report.yml` should look like - \n```yml\nname: üêõBug Report\ndescription: File a bug report here\ntitle: \"[BUG]: \"\nlabels: [\"bug\"]\nassignees: [\"AnishDe12020\"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report!!!\n  - type: checkboxes\n    id: new-bug\n    attributes:\n      label: Is there an existing issue for this?\n      description: Please search to see if an issue already exists for the bug you encountered.\n      options:\n      - label: I have searched the existing issues\n        required: true\n  - type: textarea\n    id: bug-description\n    attributes:\n      label: Description of the bug\n      description: Tell us what bug you encountered and what should have happened\n    validations:\n      required: true\n  - type: textarea\n    id: steps-to-reproduce\n    attributes:\n      label: Steps To Reproduce\n      description: Steps to reproduce the behavior.\n      placeholder: Please write the steps in a list form\n    validations:\n      required: true\n  - type: dropdown\n    id: versions\n    attributes:\n      label: Which version of the app are you using?\n      description: If this issue is occurring on more than 1 version of the app, select the appropriate versions.\n      multiple: true\n      options:\n       - 1.0.0\n       - 1.1.0\n       - 1.2.0\n       - 2.0.0\n       - 2.1.0\n    validations:\n      required: true\n```\n\nNow you should commit the file.\n\nNow if we try to create an issue, we will be presented with this page - \n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633067377439/effLTQIx9p.png)\n\nWe would see multiple options if we made more templates but we have only one right now so let us see if it works\n\nNotice how the label and assignee has been added - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633067599150/BU5zmoXbr.png)\n\nOn submitting the issue, it will be created like any other issue - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633067665394/dVguetkPb.png)\n\nYou can see the repository for this tutorial [here](https://github.com/AnishDe12020/issue-forms)\n\nYou can also see the schema for GitHub issue forms [here](https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema)\n\n\n\n","readingTime":{"text":"5 min read","minutes":4.525,"time":271500,"words":905},"wordCount":906},{"_id":"615434b09c8bfd08f5ba8ae2","slug":"my-journey-into-development","title":"My Journey into Development","brief":"Early Years\nTechnology was something I was interested in since a very young age. At first, I was mainly interested in electronics and robotics. I didn't make anything at the age of 5 or 6 but I would play around with whatever I would find at home. Th...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632908401380/aMdJb9Yr5.png","dateAdded":"2021-09-29T09:41:04.328Z","contentMarkdown":"#  Early Years\nTechnology was something I was interested in since a very young age. At first, I was mainly interested in electronics and robotics. I didn't make anything at the age of 5 or 6 but I would play around with whatever I would find at home. Then, I started getting interested in cars at the age of 7 and used to keep up with the latest news. This was also the time I started getting interested in gadgets likes phones. \n\n# Lego\nI was interested in playing with Lego from a very young age and every time I got a new set, I would try to make as many models as possible from that. I got a Lego Mindstorm (it is a robot that can be programmed) and many models can be built out of it. I would be making a new model every week and spending a lot of time doing that.\n\n# Starting with coding\nI was about 9 or 10 when I started some real coding. I started working with some Arduino stuff and then learned the C programming language. I learned Java when I was 11 and started some Android Development but I lost interest in it after some time. I didn't do much for the next one year. Then I started working on an Arduino project and then another but didn't succeed with any of them. I started learning Python a few months later and then started working on some small projects. I also tried to learn machine learning but realized that I needed to learn more maths to understand the theory behind all the algorithms and things.\n\n# YouTube\nI used to watch a lot of tech YouTubers upload content on YouTube and I was fascinated by it. I decided to make my [own channel](https://www.youtube.com/channel/UCY-rVWTIsN-G7s81C89SzkA) last year and started uploading a lot of videos. Now I have over 450 subscribers and over 90000 views. I haven't uploaded there for a while but I plan on getting my channel out of the grave with development-related videos.\n\n# Web Development\nI started learning Javascript earlier this year and then learned React. Next, I learn NextJS and then made my first proper application, [EasyComments](https://easycomments.anishde.dev/), as a part of the [Hashnode x Auth0 Hackathon](https://townhall.hashnode.com/auth0-hackathon) which was conducted back in August. \n\nThat is my journey into development so far and I aim to learn more, build more applications and contribute to open-source.","readingTime":{"text":"3 min read","minutes":2.025,"time":121500,"words":405},"wordCount":405},{"_id":"615191fd040ee8723694f798","slug":"my-journey-into-technical-writing","title":"My Journey into Technical Writing","brief":"Before I started writing\nI was interested in tech in general from a very young age and have been expanding my knowledge from watching videos and reading articles for a long time. I used to read articles written across many technical news outlets like...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632735491266/CH5HeyA0G.png","dateAdded":"2021-09-27T09:42:21.778Z","contentMarkdown":"# Before I started writing\nI was interested in tech in general from a very young age and have been expanding my knowledge from watching videos and reading articles for a long time. I used to read articles written across many technical news outlets like [GSMArena](https://www.gsmarena.com/), [XDA Developers](https://www.xda-developers.com/), and many more. Programming was something I started learning a few years back but I didn't read as many articles about it. About a year back, I found out [dev.to](https://dev.to/) and that is when I started reading a lot of articles on programming. As a side note, I have a [YouTube channel](https://www.youtube.com/channel/UCY-rVWTIsN-G7s81C89SzkA) which I started last year and it has been quite a good experience. I have not uploaded any videos for about 3 months now but I aim to resume sometime in the future.\n\n# Starting with technical writing\nI never wrote an article on DEV until I found out about Hashnode back in April of this year. Hashnode was a great place to start my blog so I made a publication and wrote [my first article](https://blog.anishde.dev/cryptography-with-python-using-fernet). I also cross-posted that article to DEV and I got quite a lot of views on that article. I liked it and then wrote [my second article](https://blog.anishde.dev/the-random-library-in-python) a few days later. Note that I was still making videos on my YouTube channel at this time.\n\n# Getting more interested\nAfter writing those two articles, I didn't write any for a few months and that was because I didn't know what to write about and I was still not very confident if I would be able to do good. Things changed with the [August Hashnode x Auth0 BootCamp](https://townhall.hashnode.com/auth0-hackathon) where I made an application and wrote [an article](https://blog.anishde.dev/easy-comments) as a part of my submission. Suddenly, I got more interested in technical writing and I have written 8 blog posts in the last 3 weeks. Hashnode's [2articles1week](https://hashnode.com/challenge/2articles1week) challenge has got me into writing consistently and the [Technical Writing Bootcamp](https://hashnode.com/bootcamp) has taught me a lot about writing.\n\n# What's next?\nI aim to write more articles about programming and tech from now on. I also plan on reviving my YouTube channel with videos about programming, let me know your thoughts in the comments section. I am also working on a portfolio site right now and will be working on more projects and learning more. [Hacktoberfest](https://hacktoberfest.digitalocean.com/) is just 3 days away and I plan on participating in Hacktoberfest as well.","readingTime":{"text":"2 min read","minutes":2.005,"time":120300,"words":401},"wordCount":401},{"_id":"615089747ef2d57e218f0f24","slug":"deta-space-what-is-it-and-why-is-it-the-future","title":"Deta Space - What is it and why is it the future?","brief":"Disclaimer: This article is not sponsored or biased in any way. I liked the idea behind the product and hence wanted to write about it.\n\nDeta was a company founded just over 2 years ago and it has been providing free Cloud solutions since.\nWhat is De...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632668000520/pvK_J77Ig.png","dateAdded":"2021-09-26T14:53:40.851Z","contentMarkdown":"> Disclaimer: This article is not sponsored or biased in any way. I liked the idea behind the product and hence wanted to write about it.\n\n[Deta](https://www.deta.sh/) was a company founded just over 2 years ago and it has been providing free Cloud solutions since.\n\n# What is Deta Space?\nDeta Space is a new product from Deta which provides you with your personal cloud hosted by Deta where you can run sandboxed versions of certain apps. It is a relatively new concept but seems to have great potential. Here the developers don't have our data so they cannot sell it. Deta still has our data but in this case, we just need to trust one company rather than trusting a bunch of other companies or developers. You can see Deta's privacy policy [here](https://www.deta.sh/privacy).\n\n# Features\n\nUpdates are on an opt-in basis so if you don't want to update to a newer version of an app, you can choose not to. There is no option to downgrade though but that can be added in the future and I hope they do so.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632666001421/sATiXbC8w.png)\n\nYou can also see all the data stored by an app on a per-app basis through Deta's dashboard. To do so, click on the 3-dot menu on the app's icon and click \"My Data\" and you will be redirected to a page where you can see all the stored data.\n\n# For Developers\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632666204628/bBAjelQfY.png)\n\nDeta Space also provides a marketplace for apps where developers can publish apps. Right now, there are only 5 but as this concept gets more popular and developers start to build more apps compatible with Deta Space, this marketplace is going to expand. You can see the marketplace [here](https://deta.space/discovery).\n\nDeta aims to make it easy for developers to make applications for Deta Space by completely managing the infrastructure from servers, security, data to payments. You can learn more about it [here](https://www.deta.sh/space). \n\n# How Deta Space can get better\n\nI also see teams using Deta Space as a future use case. Deta Space only supports spaces for individual users now, but later it can be expanded to provide a space that multiple users can access. Also, only one instance of an app can be created currently but the ability to create multiple instances will be a dealbreaker for some.\n","readingTime":{"text":"2 min read","minutes":1.925,"time":115500,"words":385},"wordCount":386},{"_id":"614d9e2411be385cc5771650","slug":"companies-i-am-looking-forward-to-work-for-in-the-future","title":"Companies I am looking forward to work for in the future","brief":"Everyone has a dream to pursue in life, some of them are usually what one will work for in the future. Some want to open their startups, some want to get into the big companies, some want to work on personal projects, and some want to do freelancing....","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632476548051/VMTroxhBN.png","dateAdded":"2021-09-24T09:45:08.570Z","contentMarkdown":"Everyone has a dream to pursue in life, some of them are usually what one will work for in the future. Some want to open their startups, some want to get into the big companies, some want to work on personal projects, and some want to do freelancing. I have got something to share today so be sure to read it till the end of this post. \n\nNow I don't have just one company in mind as a future goal, I have quite a few - \n\n## [Vercel](https://vercel.com/)\nI found out about Vercel a few months back and it is an awesome platform for hosting your sites. Vercel is also the company behind the popular React framework, [NextJS](https://nextjs.org/). I have used NextJS and Vercel in my projects and they are painless and great. Vercel's free tier is mind-blowing. Many of us are afraid that we would need to pay a ton of money for web hosting if we are to make a site but Vercel just solves that issue. NextJS has been a great framework that I have used for one of my [project](https://easycomments.anishde.dev/) for the [Auth0 Hackaton](https://townhall.hashnode.com/auth0-hackathon) which was hosted by [Hashnode](https://hashnode.com/) last month. Vercel has got great [documentation](https://vercel.com/docs) which makes understanding the platform and using it easy. The same goes for the [NextJS Documentation](https://nextjs.org/docs). As a technical writer, I will give users more examples and an accompanying article explaining what everything does as understanding code often gets overwhelming for beginners.\n\n## [Auth0](https://auth0.com/)\nIn last month's [Auth0 Hackaton](https://townhall.hashnode.com/auth0-hackathon) was hosted by [Hashnode](https://hashnode.com/) I used Auth0 for [my project](https://easycomments.anishde.dev/) and I learned a lot about it and also I have got a lot to talk about it. I was using [NextJS](https://nextjs.org/) for my project and at first, I had quite a difficult time finding the quickstart guide for NextJS. I had to just search for NextJS but seeing this it wasn't evident that they had quickstart guides for other frameworks - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632309221744/BzsvxI3J6.png)\n\nThe documentation also seems to be a bit outdated and quite complex. I aim to make things simpler for beginners. \n\n## [GitHub](https://github.com/)\nGitHub is a great platform for open-source projects and provides a lot of features, from CI/CD to package hosting to hosting static sites using GitHub pages. I use GitHub for all my projects and so do most people. GitHub has got some nice in-depth [documentation](https://docs.github.com/en) but I feel like it needs to get a little less complicated and provide more examples. The [GitHub Blog](https://github.blog/) is a great resource for those wanting to know more about the platform.\n\nThose are 3 of the many companies I want to work for in the future but there are more which I plan on covering later. Also, I am just 14 so there is a long time to go. ","readingTime":{"text":"3 min read","minutes":2.295,"time":137700,"words":459},"wordCount":460},{"_id":"6148497317da986cea6475c9","slug":"create-an-npx-cli-portfolio-under-5-minutes","title":"Create an NPX CLI Portfolio under 5 minutes","brief":"Want something like this? This is the article you are looking for. Let me show you how you can make an NPX CLI Portfolio under 5 minutes\nHow I made it\nI am mainly using React Ink for this project. I have also written a Getting started with React Ink ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632127305126/toFWFJIio.png","dateAdded":"2021-09-20T08:42:27.340Z","contentMarkdown":"![npx-cli-portfolio.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1632121300335/gd5ezLkxf.gif)\n\nWant something like this? This is the article you are looking for. Let me show you how you can make an NPX CLI Portfolio under 5 minutes\n\n# How I made it\nI am mainly using [React Ink](https://github.com/vadimdemedes/ink) for this project. I have also written a [Getting started with React Ink](https://blog.anishde.dev/getting-started-with-react-ink) article which you can check out. The goal was to make a portfolio that can be viewed in the terminal. At first, I just did a console log which logged out information about me but once I found out about React Ink, I thought of using that and making it better. The advantage of using React Ink is that it is way more flexible than simple console logs and hence I was able to put custom colors (theoretically you can apply a color to a console log but options are quite limited). Using React also allowed me to make a reusable component and hence the number of fields showing up and the contents are dynamic, based on a `data.json` file.\n\n# How you can make it as well\nI have made a template in GitHub (which you can find [here](https://github.com/AnishDe12020/cli-portfolio-template)) which you can use. You can find a detailed guide [here](https://github.com/AnishDe12020/cli-portfolio-template#how-to-use-this-template).\n\n# Things to keep in mind\n- If someone has already made a package with the same name on NPM, then you need to choose something else\n- NPM version 5.2 is needed at a minimum to use NPX (it can be used as a standalone package though)","readingTime":{"text":"2 min read","minutes":1.255,"time":75300,"words":251},"wordCount":251},{"_id":"6145fdfba2b54e17a52c27e7","slug":"getting-started-with-react-ink","title":"Getting started with React Ink","brief":"Have you ever wondered if you can use React for the command-line interface (CLI)? Yes, you can!!! React is not only used for web development but also for making Android and iOS apps (React Native) and VR Apps (React 360) and a lot more!!! React Ink i...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632026487043/Dt04gfQrV.png","dateAdded":"2021-09-18T14:55:55.301Z","contentMarkdown":"Have you ever wondered if you can use React for the command-line interface (CLI)? Yes, you can!!! React is not only used for web development but also for making Android and iOS apps [(React Native)](https://reactnative.dev/) and VR Apps [(React 360)](https://github.com/facebookarchive/react-360#readme) and a lot more!!! [React Ink](https://github.com/vadimdemedes/ink) is used to build CLI apps with React and it is very easy to get started so let us get started.\n\n# Creating a React Ink Project \n\nFor this example, I am going to be using [CodeSandBox](https://codesandbox.io/) but you can use anything you wish to as long you have Node v10 or higher and npm installed.\n\nTo get started we will firstly make a new directory and move into it (note that you shouldn't do this if you are using a cloud IDE like codesandbox or stackblitz)\n```\nmkdir react-ink\n```\n\n```\ncd react-ink\n```\n\nNow we need to create an ink app and we can do that using [`create-ink-app`](https://github.com/vadimdemedes/create-ink-app)\n```\nnpx create-ink-app\n```\n\nIf you are using an older version of npm, you might not have npx installed, in that case, you can install the `create-ink-app` cli and use that.\nTo install the cli, run the following command:\n```\nnpm install -g create-ink-app\n```\n\nThen you can just run the following command:\n```\ncreate-ink-app\n```\n\nNow pat yourself on the back, you have successfully created a React Ink project. \n\n# Playing around with the started code\n\nThis is how our directory structure should look like - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631959617867/3aTrdqVMQ.png)\n\nLet us look at these files one by one\n\nFirst we have `ui.js`. This is where you will write your React code. This is what we should be seeing in the file right now - \n```js\n'use strict';\nconst React = require('react');\nconst {Text} = require('ink');\n\nconst App = ({name = 'Stranger'}) => (\n\t<Text>\n\t\tHello, <Text color=\"green\">{name}</Text>\n\t</Text>\n);\n\nmodule.exports = App;\n```\nFirst of all, React is imported. Text is a JSX Component that is used to show any text in the CLI. Here the App takes in a prop, name and says \"Hello, <name>\" if the name is supplied or else it would say \"Hello, Stranger\". Also, notice how the name is styled with a green text color. Now you might ask from where is the name prop coming? If you see `cli.js`, you will find the answer.\n\n`cli.js`-\n\n```js\n#!/usr/bin/env node\n'use strict';\nconst React = require('react');\nconst importJsx = require('import-jsx');\nconst {render} = require('ink');\nconst meow = require('meow');\n\nconst ui = importJsx('./ui');\n\nconst cli = meow(`\n\tUsage\n\t  $ sandbox\n\n\tOptions\n\t\t--name  Your name\n\n\tExamples\n\t  $ sandbox --name=Jane\n\t  Hello, Jane\n`);\n\nrender(React.createElement(ui, cli.flags));\n```\n\nHere the App component is being imported using a special `importJSX` command. [Meow](https://www.npmjs.com/package/meow) is a library that allows us to make interactive CLIs. Here look at the `render` statement. A React element is being created where the App Element is passed as the first argument (ie the JSX part of the element) and then `cli.flags` is an arrow of props that will be passed into the element. This is where the name prop is coming from!!!\n\nNow if we run `node cli.js`, the code will be run. Running it with no arguments will yield the following result - \n\n```\nnode cli.js\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631960251325/adxkMN0J6.png)\n\nNow let us pass in the name flag.\n\n```\nnode cli.js --name=<yourName>\n```\nReplace yourName with your name and see the output\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631960380982/DNUy3vYvU.png)\n\nCodesandbox - \n\nUse the terminal to run the file and ignore the browse preview\n\n%[https://codesandbox.io/embed/hardcore-greider-i6kjn?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fcli.js&moduleview=1&theme=dark]\n\n\n# Typescript\nReact Ink supports typescript as well and that is awesome so let us take a look at it. To start a react-ink project with typescript, we need to pass in the typescript flag.\n\nFirstly let us make a directory and move into it\n\n```\nmkdir react-ink-ts\n```\n\n```\ncd react-ink-ts\n```\n\nNow let us create a typescript React Ink project\n\n```\nnpx create-ink-app --typescript\n```\n\nIf you are using an older version of npm, you might not have npx installed, in that case, you can install the `create-ink-app` cli and use that.\nTo install the cli, run the following command:\n```\nnpm install -g create-ink-app\n```\n\nThen you can just run the following command:\n```\ncreate-ink-app --typescript\n```\n\nThis time the directory structure is significantly different - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631961299423/nMcCOkwz0.png)\n\nWe have a source folder where all the typescript files are stored. Whenever we run `npm start`, the typescript is compiled into javascript and the output is stored in the `dist` folder. Most of the other things are the same. Keep in mind that the `cli.js` file in the `dist` folder is the main executable file.\n\nCodesandbox - \n\nUse the terminal to run the file and ignore the browse preview\n\n%[https://codesandbox.io/embed/billowing-https-qkx6h?expanddevtools=1&fontsize=14&hidenavigation=1&module=%2Fsource%2Fcli.tsx&moduleview=1&theme=dark]\n\n# Symlink\nOne thing you might have noticed is that when you run `create-ink-app`, it links the project. What is exactly happening? A symlink is created which allows you to run a command that invoked the cli.js file of this specific project. If you run your directory name as a command, you will see the same result as `node cli.js` or `node dist/cli.js` in the case of typescript.\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631962074043/jUNFZANdV.png)","readingTime":{"text":"5 min read","minutes":4.215,"time":252900,"words":843},"wordCount":843},{"_id":"61421a1cb95e345575e99ecb","slug":"how-to-install-figma-on-linux","title":"How to install Figma on Linux","brief":"Figma is a great UI/UX tool with a quite generous free tier. This means many developers use Figma to prototype their application or website designs (including me). Many of us developers tend to use Linux but that is where a problem arises, the Figma ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1631721750406/ca5-n5_Hz.png","dateAdded":"2021-09-15T16:06:52.361Z","contentMarkdown":"[Figma](https://www.figma.com/) is a great UI/UX tool with a quite generous free tier. This means many developers use Figma to prototype their application or website designs (including me). Many of us developers tend to use Linux but that is where a problem arises, the Figma app is not available for Linux!!!\n\nNow, to be fair, Figma has a web version which is almost exactly what the desktop version is but the desktop version is still preferred by most. \n\n# How do we get the Figma app on Linux?\nWell, a great developer thought of solving this issue by making an unofficial version of Figma for Linux and the best part is that it is open source. See the GitHub Repository [here](https://github.com/Figma-Linux/figma-linux). The app is extremely similar to the Windows version of Figma. \n\n# How is the desktop app different from the web version?\nThe desktop app is built on electron (both, the official version for Windows and macOS as well as the unofficial version for Linux). The main advantages are better font support, in-app tabs (which is extremely useful for me), and extension development.\n\n# One Small Problem which can be fixed\nWhen you are installing Figma Linux on Ubuntu, you might use the PPA repository way. This way seems to have issues and Figma won't launch. If you ever try to launch it from the terminal, you will see this error -\n```text\nfigma-linux: error while loading shared libraries: libffmpeg.so: cannot open shared object file: No such file or directory\n```\nSo what is the fix? \nDon't use the PPA!!!\nGet the `.deb` package from the [releases page](https://github.com/Figma-Linux/figma-linux/releases)\nIf you have already downloaded from the PPA, you can simply overwrite it by installing the .deb (It might ask you to downgrade, doing that will also work). We also need to hold it off `apt upgrade` or else it will automatically update and cause the issue again.\n\nTo do this run the following command - \n```bash\nsudo apt-mark hold figma-linux\n```\n\nAnd that is it!!! The issue is fixed and I hope Figma Linux works well for you. If you have any doubts, you can leave down a comment below. For bugs, submit a GitHub issue [here](https://github.com/Figma-Linux/figma-linux/issues)\n\n","readingTime":{"text":"2 min read","minutes":1.83,"time":109800,"words":366},"wordCount":367},{"_id":"613f7d4f516bc5337dd9c487","slug":"my-first-day-at-the-september-hashnode-bootcamp","title":"My first day at the September Hashnode Bootcamp","brief":"There was no Hackathon this month but Hashnode surprised us with a great Bootcamp with some great speakers onboard. The Bootcamp was for the first 1000 people who registered for it and I was one of the lucky ones to be in. If you weren't in, we have ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1631550705867/qrTzbWvzD.png","dateAdded":"2021-09-13T16:33:19.476Z","contentMarkdown":"There was no Hackathon this month but Hashnode surprised us with a great Bootcamp with some great speakers onboard. The Bootcamp was for the first 1000 people who registered for it and I was one of the lucky ones to be in. If you weren't in, we have been informed that the recording of the Bootcamp will be on YouTube soon.\n\n# The First Session\nThe Bootcamp started today, the 13th of September, 2021, and there was an introductory session where @[Sam Sycamore](@tanoaksam) and @[Quincy Larson](@quinc) gave a quick introduction along with some tips. It was a pleasure to hear Quincy's journey on establishing [Freecodecamp](https://www.freecodecamp.org/) through learning articles. He also talked about how one of his articles about getting Windows on a USB stick got spontaneously popular even though he didn't expect that. The first session taught me how writing can give you a great deal of presence on the internet and how it helps you to spread information about something and also promote your product.\n\n# The Second Session\n@[Edidiong Asikpo](@didicodes) was the main speaker for this session. She told us about how one should write a blog post by using a review of a pair of Airpods as an example. She went in-depth into what are the steps of writing an article and how quality is much more important than quantity. She also highlighted the fact that you don't need to be born with the skill of writing to be a great writer, you just need to work hard on improving it. One should also try everything to see what he/she is good at. This has given me great motivation to write. She also suggested some resources from Google on technical writing which I found quite useful. \n\nIn short, the first day was awesome and I am looking for the next session, which will be held the day after tomorrow, the 15th of September, 2021. That is for this blog post, see you in the next one!!!","readingTime":{"text":"2 min read","minutes":1.645,"time":98700,"words":329},"wordCount":329},{"_id":"613dc14a1821961e2551feb3","slug":"easter-eggs-using-react-rooks","title":"Easter eggs using React Rooks","brief":"I stumbled upon this great React Hooks library called Rooks recently and it has got a lot to offer. We all have discovered various Easter eggs in various apps and sites. It can range anywhere from stumbling upon a Rick-roll when you click a button a ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1631436948488/lDw1xu_2B.png","dateAdded":"2021-09-12T08:58:50.758Z","contentMarkdown":"I stumbled upon this great React Hooks library called [Rooks](https://react-hooks.org/) recently and it has got a lot to offer. We all have discovered various Easter eggs in various apps and sites. It can range anywhere from stumbling upon a Rick-roll when you click a button a certain number of times or enjoying playing snake when you press a hidden button on a 404 page. \n\nOk, so let us start making an Easter egg ü•ö\n\n### An alert when you press a certain key combination\n\nRooks provides us with a very useful [useKeys hook](https://react-hooks.org/docs/useKeys). With this, we can trigger an action whenever a certain key combination is pressed. For this example whenever the keys Q, W, E, R, T, and Y are pressed, all together, an alert will be triggered saying the key combination was pressed. This is a simple example and hence a great place to start\n\nFirstly we need to create a react project (you can use Gatsby, NextJS, etc as well as long as it is React). I am using [Codesandbox](https://codesandbox.io/) for this tutorial but you can do it locally as well. \n\nNow we need to install rooks so we can run \n```\nnpm i - s rooks\n```\nYou can following the [getting started guide](https://react-hooks.org/docs/getting-started/) for rooks.\n\nNow let us see the code\n\nFirstly, we need to import the hook:\n```js\nimport { useKeys } from \"rooks\";\n```\n\nNow we need to configure the hook:\n\n```js\nuseKeys([\"KeyQ\", \"KeyW\", \"KeyE\", \"KeyR\", \"KeyT\", \"KeyY\"], () => {\n    alert(\"QWERTY\");\n});\n```\n\nHere, the first parameter is an array of all the keys that need to be pressed. We pass in a callback function which will be triggered if all the keys are pressed as the second parameter. \n\nNow whenever the 6 keys are pressed together, we will see this alert - \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631436265132/OOazJ3pmE.png)\n\nCodesandbox - \n\n%[https://codesandbox.io/embed/weathered-wave-gy3s3?fontsize=14&hidenavigation=1&theme=dark]\n\nNow we have successfully made our first Easter egg ü•≥!!!\n\nNow it is time for you to explore other [hooks](https://react-hooks.org/docs/hooks-list/) and come up with some great Easter eggs for your site.\n\nFeel free to share your creations down in the comments section.\n\n\n\n","readingTime":{"text":"2 min read","minutes":1.735,"time":104100,"words":347},"wordCount":348},{"_id":"613889838b7ef170483a0d1e","slug":"stop-google-analytics-from-tracking-you-under-2-minutes","title":"Stop Google Analytics from tracking you under 2 minutes","brief":"Many sites use analytics tools to measure their site insights. Google Analytics is an extremely popular tool in this sector as it is free (though there is a paid version for enterprise use but the free one is what most people use). \nThe problem\nGoogl...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1631095068830/_lLk6qzyQ.png","dateAdded":"2021-09-08T09:59:31.419Z","contentMarkdown":"Many sites use analytics tools to measure their site insights. Google Analytics is an extremely popular tool in this sector as it is free (though there is a paid version for enterprise use but the free one is what most people use). \n\n# The problem\nGoogle is an ads company and 80% of its revenue is generated by targeting ads to the right users. For this Google needs to know a lot about one and Google Analytics plays a vital role as it is widely used allowing Google to track more and more users around the web. One might also want to keep their privacy intact and not want the website owner to know about their activity on the site. Website owners usually use analytics to measure views, engagement, traffic source, etc. If you don't want the website owner to know this, you need to stop their analytics service from tracking you. \n\n# The Solution\nWell, there is a solution to this issue, that is, opting out from Google Analytics. \n> How do you do that?\n\nThere is a browser extension that one can install to opt-out of Google Analytics. \n\n>So who made this? \n\nSurprisingly it is Google who has made this browser extension!!! \n\n> So how do you get it installed?\n\nThe extension is surprisingly available for not only Chrome but also Firefox, Microsoft Edge, and Safari so it is just a matter of downloading it from their respective extension stores.\n\n### Chromium-based browsers\n\nFor Google Chrome, Microsoft Edge, or any chromium based browser (Brave, Vivaldi, etc.), you can download it from the chrome web store - https://chrome.google.com/webstore/detail/empty-title/fllaojicojecljbmefodhfapmkghcbnh?hl=en-GB\n\n### Safari\n\nI couldn't find how to download it for Safari though as I don't have a mac. If any of you find it, feel free to leave a comment with the link in the comments section.\n\n### Mozilla Firefox\n\nFor Firefox you need to go to the [official site for the extension](https://tools.google.com/dlpage/gaoptout) and click the blue button.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631092797415/nhAjDHPA4.png)\n\nThis will redirect you to the EULA page for the extension from where you can accept the EULA and then you will be prompted to download a .xpi (a compressed installation archive used by various Mozilla applications. Learn more about it [here](https://fileinfo.com/extension/xpi)) file. Once you have downloaded it, just open the file (you can open it from the file explorer or through the downloads menu from within Firefox itself.  Now you will be prompted with a popup in the browser asking you to add the extension. Click the Add button to install the extension.\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631093080136/O57XNIBYc.png)\n\nThat is it!!! You have now successfully added the Google Analytics opt-out browser extension and have opted out of Google from tracking you around the internet.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631093241060/Yv80YF6LM.png)\n\n# Does it work?\nYou might ask me if this really works and in my experience and testing, it does. My blog on Hashnode uses Google Analytics and hence it was the perfect candidate for me to test upon. I installed the extension and visited my blog. The real-time users count in my Google Analytics dashboard saw no increase but when I visited the same site from a guest window, the real-time users count increased by 1 showing the extension does indeed work.\n\n# The caveats\nThere are two very important things to keep in mind - \n1. This extension only opts you out of Google Analytics so other trackers on the site can still track you.\n2. The fact that this extension is made by Google and hence we don't really know what Google is really doing.\n\nI have also noticed that the [official site for the extension](https://tools.google.com/dlpage/gaoptout) looks quite outdated and even the [chrome web store page](https://chrome.google.com/webstore/detail/google-analytics-opt-out/fllaojicojecljbmefodhfapmkghcbnh?hl=en-GB) seems to not have been updated in a while. The extension is also using a really old version of the Google logo. Despite this, the extension has been updated recently, that is, the 26th of January 2021. Now that is still over 6 months ago but there is no real reason to update such an extension unless there is a change in how Google Analytics opt-out works so it seems fine to me.\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631094112153/KVUy6UTDM.png)\n\nThat is it for this tutorial!!! \n\n","readingTime":{"text":"4 min read","minutes":3.445,"time":206700,"words":689},"wordCount":690},{"_id":"612e08691dd572151d81ca32","slug":"easy-comments","title":"Easy Comments - An easy way to add comments functionality to your site","brief":"üë® Firstly a little bit about myself\nI am a 14-year-old Developer, YouTuber, Blogger, and of course a student. Though I have been coding for quite a long time, I started web development about 5 months ago. I learned Javascript, React, Redux, NextJS, ...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1630405714711/mdWqS7tlK.png","dateAdded":"2021-08-31T10:46:01.133Z","contentMarkdown":"# üë® Firstly a little bit about myself\nI am a 14-year-old Developer, YouTuber, Blogger, and of course a student. Though I have been coding for quite a long time, I started web development about 5 months ago. I learned Javascript, React, Redux, NextJS, various styling libraries, and a lot more in this course of time. Hashnode has now given me an opportunity to show and test my skills through this hackathon.\n\n# üõ° A few words on [Auth0](https://auth0.com/)\nAs a part of this hackathon, I am using the popular authentication provider, [Auth0](https://auth0.com/) for user authentication on my application. Auth0 is great to get started (especially with their [quickstarts](https://auth0.com/docs/quickstarts/)) and has a quite generous free tier. The [NextJS SDK](https://github.com/auth0/nextjs-auth0) provides all the basic features along with some advanced ones too and is quite easy to implement and use. There is a Universal Login Page which means one can get started quickly without the need of developing components for that (though you have the option to).\n\n# ü§î So what have I built?\nI started quite late, the 19th of August and I didn't have a lot of time but I was successful in making a Web Application!!! So my app is called [Easy Comments](https://easycomments.anishde.dev/) and it allows you to easily allow comments functionality to your site by adding a simple embed. \n\nI started doing some mock-ups in my brain. Then I recreated some of them on Figma and then decided to start building. I started with [OpenChakra](https://openchakra.app/) (because I am using [Chakra UI](https://chakra-ui.com/), more on that later).\n\n<details>\n<summary>Screenshots</summary>\n  <img src=\"https://i.imgur.com/T7FOqZz.png\" alt=\"Home Page Screenshot\" />\n  <img src=\"https://i.imgur.com/avdZnni.png\" alt=\"Sites Page Screenshot\" />\n  <img src=\"https://i.imgur.com/S4La8wt.png\" alt=\"Manage Comments Page Screenshot\" />\n  <img src=\"https://i.imgur.com/V7Zbzpa.png\" alt=\"My Comments Page Screenshot\" />\n  <img src=\"https://i.imgur.com/kbu0jtt.png\" alt=\"Leave a Comment Page Screenshot\" />\n</details>\n\n## üìö The stack\nI had learned React over the course of over 4 months and also NextJS so I thought of going with NextJS for this project. I also had experience with Chakra UI and found it to be awesome so that is what I am using for styling. \n\n- [NextJS](https://nextjs.org/)\n- [Chakra UI](https://chakra-ui.com/) for styling\n- [Firebase](https://firebase.google.com/) for storing data\n- [Auth0](https://auth0.com/) for user authentication\n- [React Icons](https://react-icons.github.io/react-icons/) and [Chakra Icons](https://chakra-ui.com/docs/media-and-icons/icon#all-icons) for icons\n- [React Markdown](https://www.npmjs.com/package/react-markdown) and [Remark GFM](https://github.com/remarkjs/remark-gfm) for markdown supports in comments\n- [React Syntax Highligher](https://github.com/react-syntax-highlighter/react-syntax-highlighter) for syntax highlighting of code in comments.\n- [Iframe Resizer](https://github.com/davidjbradshaw/iframe-resizer) support\n- [Formik](https://formik.org/) for forms\n- [Vercel](https://vercel.com/) for hosting\n\n## üëÄ The reason\n> Why did I make this?\n\nThere are many ways of integrating comments onto your site, [Disqus](https://disqus.com/) being a popular option but there is one big issue, trackers. Most of us don't like to be tracked around the web and hence I felt like we need a tracker-free alternative. \n\n## Features\n- No Ads. No Trackers.\n- Free and Open Source (Licensed under [MIT](https://opensource.org/licenses/MIT))\n- Unlimited Sites\n- Unlimited Comments\n- Approval stage for Comments (optional)\n- Route wise comments\n- Ability to edit and delete a Comment\n- Markdown support\n- Customization of Comments \n- Ability to Self-Host\n\n## ‚öôÔ∏è How do you use it?\nI have written a [quickstart guide](https://github.com/AnishDe12020/easycomments#-guide) on GitHub - https://github.com/AnishDe12020/easycomments#-guide\n\n\n## üñß How does it work?\nOnce you create a site on the [sites page](https://easycomments.anishde.dev/sites), you get an embed URL upon clicking the \"See Embed URL\" button (refer the [quickstart](https://github.com/AnishDe12020/easycomments#get-the-embed-url) for more information).\n\nThen it is quite simple, you just need to embed that link on your site but how will you do it?\n\nThe embed supports [Iframe Resizer](https://github.com/davidjbradshaw/iframe-resizer) so it is quite simple.\n\nFor React - \n```js\n<IframeResizer\n  style={{\n    width: \"1px\",\n    minWidth: \"100%\",\n    height: \"1px\",\n    minHeight: \"100%\",\n  }}\n  src=\"<Your embed url goes here>\"\n  title=\"Comments\"\n/>\n```\n\nFor Vue refer to this [guide](https://github.com/davidjbradshaw/iframe-resizer/blob/master/docs/use_with/vue.md)\n\nFor Angular, you can refer to this [comment](https://github.com/davidjbradshaw/iframe-resizer/issues/478#issuecomment-347958630)\n\nYou can refer to the Iframe Resizer [getting started guide](https://github.com/davidjbradshaw/iframe-resizer#getting-started) for more information.\n\n> A sneak peek behind the curtains\n\n```js\n<ReactMarkdown\n    remarkPlugins={[remarkGfm]}\n    components={{\n        code({ node, inline, className, children, ...props }) {\n        const match = /language-(\\w+)/.exec(className || \"\");\n        return !inline && match ? (\n            <SyntaxHighlighter\n            language={match[1]}\n            style={colorMode === \"light\" ? solarizedlight : dracula}\n            PreTag=\"div\"\n            {...props}\n            >\n            {String(children).replace(/\\n$/, \"\")}\n            </SyntaxHighlighter>\n        ) : (\n            <code className={className} {...props}>\n            {children}\n            </code>\n        );\n        },\n    }}\n    >\n    {comment}\n</ReactMarkdown>;\n```\n\nHere [React Markdown](https://www.npmjs.com/package/react-markdown), [React Syntax Highlighter](https://github.com/react-syntax-highlighter/react-syntax-highlighter) and the [Remark GFM](https://github.com/remarkjs/remark-gfm) plugin is used. React Markdown helps with parsing markdown and Remark GFM adds support for GitHub Flavoured Markdown. React Syntax Highlighter does syntax highlighting for code snippets in a comment. \n\n> How is the embed URL structured?\n\nA sample embed URL - \n```\nhttps://easycomments.anishde.dev/embed/EwI3VgCSuJkl85wh18Ru/\n```\n\nFirstly we have the domain, `https://easycomments.anishde.dev`. Then we have the embed route which is a [dynamic route](https://nextjs.org/docs/routing/dynamic-routes) and hence the `siteId` is put as a parameter. We can also add a route, for example - \n```\nhttps://easycomments.anishde.dev/embed/EwI3VgCSuJkl85wh18Ru/easy-comments/\n```\nHere, comments are stored route-specific. For example, you have a blog, `blog.com`. You can have an embed with the route as `/` (default) for comments left on the home page. Then you can have a route for each blog post with a route, for example, `how-to-add-auth0-to-nextjs` and only comments for that specific blog post will show up when queried with that route.\n\nYou can also specify a preferred color mode. By default, the comments widget defaults to the system color mode but this can be overwritten with the `colorMode` parameter in the URL.\n\nExample - \n\n```\nhttps://easycomments.anishde.dev/embed/EwI3VgCSuJkl85wh18Ru/easy-comments?colorMode=dark\n```\n\nThe available parameters are `light` and `dark` as of now\n\n# ‚ùì Some FAQ\n\n> How does one leave a comment?\n\nEach embed has got a \"Leave a Comment\" link. This redirects the users to a page where one can sign in (if not already signed in) and then leave a comment. \n\nExample - \n```\nhttps://easycomments.anishde.dev/comments/EwI3VgCSuJkl85wh18Ru\n```\n\n> How do comment approvals work?\n\nComments need to be approved by the site owner unless he/she explicitly enabled auto-approvals of comments when setting up the site or later on through the [sites page](https://easycomments.anishde.dev/sites). If a comment is not approved, the comment won't show up for everyone except the author (who will see a pending badge). The site owner can also remove the comment which then changes the comment status to removed and the comment author sees a removed badge. The site owner can do such comment management via the [manage comments page](https://easycomments.anishde.dev/comments). There is a global manage comments page for all sites the site owner owns and one for each site he/she owns. \n\n> How can I see comments I have left on other's sites?\n\nThe comment will be visible on the site you have left the comment on (along with the status). You can also view all comments that you have left at the [my comments page](https://easycomments.anishde.dev/my-comments) from where you can edit as well as delete a comment (this can be done from the leave a comment page as well)\n\n> What site settings can a site owner change\n\nRight now Show Date, Show Time, Show Avatar and Automatically Approve Comments are the available settings that can be changed by the site owner. In the future, I plan to add support for custom colors and more!!! You can keep an I on the [to-do list](https://github.com/AnishDe12020/easycomments#%EF%B8%8F-to-do). \n\n# üéÅ Wrapping up\n\nYou can see the site live on https://easycomments.anishde.dev/\n\nSource code - https://github.com/AnishDe12020/easycomments\n\n### ‚≠ê If you liked the project, a star on GitHub would be amazing!!! ü§©","readingTime":{"text":"7 min read","minutes":6.07,"time":364200,"words":1214},"wordCount":1214},{"_id":"608032bec99e200d08f82d1b","slug":"the-random-library-in-python","title":"The Random Library in Python","brief":"You might need your program to choose a random lucky winner from a list of people participating in a lottery or maybe you want to chooses a random fruit from a list of fruits the doctor made you. There are many use cases for this library and let us s...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1619014305729/ivierDSCN.png","dateAdded":"2021-04-21T14:12:14.873Z","contentMarkdown":"You might need your program to choose a random lucky winner from a list of people participating in a lottery or maybe you want to chooses a random fruit from a list of fruits the doctor made you. There are many use cases for this library and let us see how we can use this library.\n\n# Installation and Importing\n\nThe library is included with the normal python installation so you don't need to install using `pip`\n\nWe need to import the library though so let us do that real quick\n```python\nimport random\n```\n# Important and Common functions\n## `random.choice()`\n\nNow that we have imported the library, let us quickly go through some of the common and important functions the library comes with\n\nLet us see `random.choice()` first\nThis will pick a random item from any iterable object (list, string etc.)\n\nExample:\n```python\nimport random\n\nlist = [\"banana\", \"apple\", \"guava\", \"cherry\", \"strawberry\", \"mango\"]\nprint(random.choice(list))\n# Will pick any random fruit from the list and print that\n\nstr = \"Coronavirus cases have spiked again!!!\"\nprint(random.choice(str))\n# Will pick any random character from the string and print it out\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619011131901/tCxW4n6sG.png)\nSo in the above image we can see that each and every time the function is run, it will print out a different value as it is picking out randomly\n\n## `random.randrange()`\n\nNow this is an interesting function and probably the one most are looking for. It basically picks out a random number from a range of numbers\n\nExample:\n```python\nimport random\n\nprint(random.randrange(1, 20, 2))\n# Now it will print out any random number amongst 1, 3, 5, 7, 9, 11, 13, 15, 17 and 19\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619012224758/YGFpml6fm.png)\n\nThere are 3 arguments taken in of which the first two are compulsory and third one is optional and be default `1`. But what are the arguments?\n\n1. The first argument is the number from which the range starts\n2. The second argument is the number where the range ends\n3. The third argument is the step which is the number of numbers to skip while making the list of the numbers\n\nNow does that sound similar?\nYes, this are the exact same arguments take in by the `range` function which is in-built in Python. The `random.randrange()` function basically creates a list from the range with the arguments given and then picks out a random.\n\n## `random.random()`\nNow this one is a pretty simple one. It returns a float value between 0 and 1\n\nExample:\n```python\nimport random\n\nprint(random.random())\n```\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619012345562/7hvScY8I0.png)\n\n## `random.seed()`\nNow this one is a bit tough to understand. So the seed function is basically used to save the state of a random function so that it can generate some random numbers on multiple executions of the code on the same machine or on a different machine for a specific seed value. The seed value is the previous random value generated by the generator or if run for the first time, it is set to the current system time.\n\nExample:\n```python\nimport random\n\nrandom.seed(10)\nprint(\"A mapped random number with seed 10 is: \" + random.random())\n```\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619012999682/zBSuSyECY.png)\n\n## `random.shuffle()`\nAs the name of the function suggests, we can use it to shuffle a list i.e. change the position of the items in the list.\n\nExample:\n```python\nimport random\n\ncities = [\"London\", \"Bangalore\", \"Delhi\", \"Mumbai\", \"Tokyo\", \"New York City\"]\n\nprint(\"List before shuffling: \")\nprint(cities)\nprint(\"List after shuffling: \")\nrandom.shuffle(cities)\nprint(cities)\n```\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619013686663/udyuXWOr0.png)\n\n## `random.uniform()`\nThis one is pretty similar to `random.randrange()` but then returns a `float` value instead of an `integer` value and does not take any step in input\n\nArguments:\n1. Lower Limit - included in generation\n2. Upper Limit - Excluded in generation\n\nExample:\n```python\nimport random\n\nprint(random.uniform(10, 15))\n```\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619013874416/Up-dkAYDWMn.png)\n\n## `random.randint()`\nTakes 2 arguments as the lower limit and the upper limit. The returned number is between these 2 values and can be anyone of them as well.\n\nExample:\n```python\nimport random\n\nrandom.randint(50, 100)\n```\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1619069311578/TV5dVrBER.png)\n\nSo that was some of the most important and commonly used functions of the `random` package and that is it for this blog!!!\n\n[Link](https://docs.python.org/3/library/random.html) to random package docs if you want to explore more - https://docs.python.org/3/library/random.html","readingTime":{"text":"4 min read","minutes":3.485,"time":209100,"words":697},"wordCount":697},{"_id":"60716c998b2b857c0bdb5860","slug":"cryptography-with-python-using-fernet","title":"Cryptography with Python using Fernet","brief":"Let us look at how to encrypt text and files using Python.\nFor this we are going to be using Fernet which is a part of python's cryptography package\nSo let us get right into it\nOk firstly we need to downloaded the cryptography package using pip\nOn Wi...","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1618046247940/JiNf1vAbR.png","dateAdded":"2021-04-10T09:15:05.206Z","contentMarkdown":"Let us look at how to encrypt text and files using Python.\nFor this we are going to be using [Fernet](https://cryptography.io/en/latest/fernet.html) which is a part of python's cryptography package\n\nSo let us get right into it\n\nOk firstly we need to downloaded the cryptography package using `pip`\n\nOn Windows:\n\n```\npip install cryptography\n```\n\nOn Linux/macOS:\n\n```\npip3 install cryptography\n```\n\nAfter we have executed the command in the terminal, we are ready to start coding.\n\nYou might want to use your favourite code editor (vscode, sublime text, atom etc...) or any IDE.\n\nNow let us first import the required library\n\n```python\nfrom cryptography.fernet import Fernet\n```\n\nThen we are going to define a function that will write the key to a file\n\n```python\ndef write_key():\n    key = Fernet.generate_key() # Generates the key\n    with open(\"key.key\", \"wb\") as key_file: # Opens the file the key is to be written to\n        key_file.write(key) # Writes the key\n```\n\nWe will also write down a function that will help with reading and loading the key into a variable\n\n```python\ndef load_key():\n    return open(\"key.key\", \"rb\").read() #Opens the file, reads and returns the key stored in the file\n```\n\nNow let us take the message we are going to encode as user input and encode it to bytes because that is how fernet works\n\n```python\nmessage = input(\"Message: \").encode() # Takes the message as user input and encodes it\n```\n\nNow we need to write are top secret key to the key file. We are going to run this only once and then comment the line out because we don't want it to write a new key down every time the code is run. \n\n```python\nwrite_key() # Writes the key to the key file\n```\nNow we need to load the key i.e. read the key from the key file and store it in a variable called as `key` though you can name it whatever you want\n\n```python\nkey = load_key() # Loads the key and stores it in a variable\n```\n\nNow we need to initialize the fernet object by passing in the key we just loaded\n\n```python\nf = Fernet(key)\n```\n\nNow let us get to the main part, encrypting the message\nAlso let us print it out\n\n```python\nencrypted_message = f.encrypt(message)\nprint(encrypted_message)\n```\n\nOutput:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618045556166/NkVXFrg-7.png)\n\nYou see that the encrypted message cannot be understood by anyone so it is safe now and will be the same unless decrypted with the same key\n\nTo decrypt, it is a very similar process\n```python\ndecrypted_message = f.decrypt(encrypred_message)\nprint(decrypted_message)\n```\n\nOutput:\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618045676137/GQuPm-UeO.png)\nSo here, first the message is encrypted and is printed out and then we decrypt it and print it in the next line. If the initial message and the decrypted message are the exact same, our code has worked!!!\n\nSo that was it for this tiny blog (and it was my first blog ever so leave down some feedback!!!)\n\n# Video Tutorial:\n[Link](https://youtu.be/P2k4f1tu-ss)\n\n%[https://www.youtube.com/watch?v=P2k4f1tu-ss]","readingTime":{"text":"3 min read","minutes":2.445,"time":146700,"words":489},"wordCount":489}],"domain":"blog.anishde.dev"}